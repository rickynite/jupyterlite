{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/celldragutils.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/collapser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/headerfooter.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/inputarea.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/attachments/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/outputarea/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/placeholder.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/outputarea/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/notebook-extension/node_modules/@jupyterlab/cells/lib/widget.js"],"names":["DRAG_IMAGE_CLASS","CELL_DRAG_CONTENT_CLASS","CELL_DRAG_PROMPT_CLASS","CELL_DRAG_MULTIPLE_BACK","CellDragUtils","findCell","node","cells","isCellNode","cellIndex","parentElement","each","cell","index","detectTargetArea","target","targetArea","editorWidget","contains","promptNode","shouldStartDrag","prevX","prevY","nextX","nextY","dx","Math","abs","dy","createCellDragImage","activeCell","selectedCells","count","length","promptNumber","model","type","executionCount","toString","cellContent","value","text","split","slice","VirtualDOM","h","className","Collapser","ReactWidget","super","this","addClass","onClick","e","handleClick","InputCollapser","_a","parent","inputHidden","update","OutputCollapser","outputHidden","CellHeader","Widget","CellFooter","InputArea","options","contentFactory","defaultContentFactory","prompt","_prompt","createInputPrompt","editorOptions","factory","editorFactory","updateOnShow","editor","_editor","CodeEditorWrapper","layout","PanelLayout","addWidget","widget","_rendered","hide","show","isDisposed","dispose","ContentFactory","defaultEditorFactory","InputPrompt","CodeMirrorEditorFactory","newInlineEditor","_executionCount","textContent","AttachmentsModel","_map","ObservableMap","_isDisposed","_stateChanged","Signal","_changed","_modelDB","_serialized","_changeGuard","values","key","Object","keys","undefined","set","changed","connect","_onMapChanged","modelDB","createValue","get","fromJSON","toJSON","_onSerializedChanged","has","item","_createItem","delete","forEach","clear","ret","createAttachmentModel","_onGenericChange","sender","args","emit","newValue","AttachmentModel","AttachmentsResolver","_parent","_model","url","startsWith","resolveUrl","path","getDownloadUrl","attachment","data","mimeType","imageRendererFactory","Error","_b","_c","isLocal","call","Private","OutputAreaModel","clearNext","_trusted","trusted","list","ObservableList","_add","_onListChanged","i","JSONExt","normalize","output","wait","_lastStream","toArray","map","name","_lastName","shouldCombine","lastModel","removeOverwrittenChars","push","createOutputModel","OutputModel","Array","isArray","join","txt","replace","search","base","match","insert","fixCarriageReturn","tmp","fixBackspace","isCodeCellModel","isMarkdownCellModel","isRawCellModel","CellModel","CodeEditor","id","UUID","contentChanged","stateChanged","_modelDBMutex","onGenericChange","observableMetadata","createMap","onModelDBMetadataChange","onTrustedChanged","metadata","source","sharedModel","getId","getValue","setValue","create","JSON","parse","stringify","cell_type","event","getMetadata","_changeCellMetata","setMetadata","jupyter","collapsed","scrolled","tags","change","_onSharedModelChanged","metadataChange","AttachmentsCellModel","attachments","_attachments","createAttachmentsModel","RawCellModel","MarkdownCellModel","CodeCellModel","outputs","execution_count","_onExecutionCountChanged","setOutputs","_outputs","createOutputArea","onModelDBOutputsChange","collapseChanged","oldValue","hasOwnProperty","reinitialize","clearExecution","getOutputs","add","switchSharedModel","codeCell","newValues","updateOutputs","newIndex","oldIndex","oldValues","outputsChange","executionCountChange","outputs_hidden","newJupyter","s","t","p","prototype","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","CONTENT_CLASS","Placeholder","callback","_callback","InputPlaceholder","ellipsesIcon","elementPosition","height","width","OutputPlaceholder","OUTPUT_AREA_ITEM_CLASS","OUTPUT_AREA_OUTPUT_CLASS","OUTPUT_AREA_PROMPT_CLASS","OutputArea","outputLengthChanged","_onIOPub","msg","msgType","header","msg_type","displayId","content","transient","targets","assign","output_type","_displayIdMap","_onExecuteReply","status","payload","pages","filter","_minHeightTimeout","Map","rendermime","trimmedOutputModels","maxNumberOutputs","headTailNumberOutputs","round","headEndIndex","_insertOutput","onModelChanged","onStateChanged","widgets","_future","_clear","onIOPub","onReply","onStdin","KernelMessage","onInputRequest","startIndex","_moveDisplayIdIndices","_preventHeightChangeJitter","_setOutput","indices","rangeEnd","splice","rect","getBoundingClientRect","style","minHeight","window","clearTimeout","setTimeout","future","stdinPrompt","password","panel","Panel","createOutputPrompt","input","createStdin","then","renderer","preferredMimeType","renderModel","currentPreferredMimetype","isIsolated","IsolatedRenderer","separatorModel","_showTrimmedOutputs","separator","createOutputItem","addEventListener","insertWidget","_createOutput","removeWidgetAt","toggleClass","createRenderedMimetype","createRenderer","catch","error","pre","document","createElement","message","appendChild","setAttribute","SimplifiedOutputArea","execute","async","code","sessionContext","stopOnError","stop_on_error","kernel","session","requestExecute","done","mimeMd","OutputPrompt","Stdin","createInputWidgetNode","_promise","PromiseDelegate","_input","getElementsByTagName","focus","_value","promise","keyCode","sendInputReply","resolve","removeEventListener","wrapped","_wrapped","iframe","frameBorder","scrolling","contentDocument","open","write","innerHTML","close","body","scrollHeight","heightChangeObserver","observe","AttachedProperty","owner","RENDERED_CLASS","NO_OUTPUTS_CLASS","CONTENTS_MIME_RICH","Cell","_readOnly","_inputHidden","_syncCollapse","_syncEditable","createCellHeader","inputWrapper","_inputWrapper","inputCollapser","updateEditorOnShow","_inputPlaceholder","footer","createCellFooter","editorConfig","setOptions","onMetadataChanged","loadCollapseState","loadEditableState","firstElementChild","syncEditable","saveEditableState","current","readOnly","Promise","setPrompt","syncCollapse","saveCollapseState","handleInputHidden","source_hidden","constructor","refresh","getOption","setOption","_editorFactory","CodeCell","_outputHidden","_syncScrolled","_savingMetadata","_rendermime","outputWrapper","_outputWrapper","outputCollapser","_output","_outputLengthHandler","_outputPlaceholder","initializeState","loadScrolledState","removeWidget","isHidden","_outputsScrolled","syncScrolled","saveScrolledState","outputsScrolled","disconnect","force","trim","cellId","recordTiming","msgPromise","outputArea","recordTimingHook","label","execution_state","date","Date","toISOString","timingInfo","registerMessageHook","started","finished","AttachmentsCell","_evtPaste","preventDefault","_evtNativeDrop","_evtDragOver","_evtDrop","onAfterAttach","some","mimeData","hasData","getData","mimetype","stopPropagation","dropAction","proposedAction","clipboardData","items","kind","getAsString","replaceSelection","_attachFiles","dataTransfer","supportedMimeTypes","types","withContent","URI","_generateURI","updateCellSourceWithAttachment","fullModel","blob","getAsFile","_attachFile","reader","FileReader","onload","evt","href","protocol","URLExt","result","matches","exec","bundle","onerror","console","readAsDataURL","lastIndex","lastIndexOf","concat","substring","MarkdownCell","_renderer","_prevText","_ready","clone","resolver","_monitor","ActivityMonitor","signal","timeout","activityStopped","_updateRenderedInput","renderInput","_handleRendered","inputArea","removeClass","showEditor","onUpdateRequest","attachmentName","textToBeAppended","mimeModel","MimeModel","RawCell"],"mappings":"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","file":"5734.bundle.js","sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * This module contains some utility functions to operate on cells. This\n * could be shared by widgets that contain cells, like the CodeConsole or\n * Notebook widgets.\n */\nimport { each } from '@lumino/algorithm';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\n/**\n * Constants for drag\n */\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * The class name added to drag images.\n */\nconst DRAG_IMAGE_CLASS = 'jp-dragImage';\n/**\n * The class name added to singular drag images\n */\nconst SINGLE_DRAG_IMAGE_CLASS = 'jp-dragImage-singlePrompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_CONTENT_CLASS = 'jp-dragImage-content';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_PROMPT_CLASS = 'jp-dragImage-prompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_MULTIPLE_BACK = 'jp-dragImage-multipleBack';\nexport var CellDragUtils;\n(function (CellDragUtils) {\n    /**\n     * Find the cell index containing the target html element.\n     * This function traces up the DOM hierarchy to find the root cell\n     * node. Then find the corresponding child and select it.\n     *\n     * @param node - the cell node or a child of the cell node.\n     * @param cells - an iterable of Cells\n     * @param isCellNode - a function that takes in a node and checks if\n     * it is a cell node.\n     *\n     * @returns index of the cell we're looking for. Returns -1 if\n     * the cell is not founds\n     */\n    function findCell(node, cells, isCellNode) {\n        let cellIndex = -1;\n        while (node && node.parentElement) {\n            if (isCellNode(node)) {\n                each(cells, (cell, index) => {\n                    if (cell.node === node) {\n                        cellIndex = index;\n                        return false;\n                    }\n                });\n                break;\n            }\n            node = node.parentElement;\n        }\n        return cellIndex;\n    }\n    CellDragUtils.findCell = findCell;\n    /**\n     * Detect which part of the cell triggered the MouseEvent\n     *\n     * @param cell - The cell which contains the MouseEvent's target\n     * @param target - The DOM node which triggered the MouseEvent\n     */\n    function detectTargetArea(cell, target) {\n        let targetArea;\n        if (cell) {\n            if (cell.editorWidget.node.contains(target)) {\n                targetArea = 'input';\n            }\n            else if (cell.promptNode.contains(target)) {\n                targetArea = 'prompt';\n            }\n            else {\n                targetArea = 'cell';\n            }\n        }\n        else {\n            targetArea = 'unknown';\n        }\n        return targetArea;\n    }\n    CellDragUtils.detectTargetArea = detectTargetArea;\n    /**\n     * Detect if a drag event should be started. This is down if the\n     * mouse is moved beyond a certain distance (DRAG_THRESHOLD).\n     *\n     * @param prevX - X Coordinate of the mouse pointer during the mousedown event\n     * @param prevY - Y Coordinate of the mouse pointer during the mousedown event\n     * @param nextX - Current X Coordinate of the mouse pointer\n     * @param nextY - Current Y Coordinate of the mouse pointer\n     */\n    function shouldStartDrag(prevX, prevY, nextX, nextY) {\n        const dx = Math.abs(nextX - prevX);\n        const dy = Math.abs(nextY - prevY);\n        return dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD;\n    }\n    CellDragUtils.shouldStartDrag = shouldStartDrag;\n    /**\n     * Create an image for the cell(s) to be dragged\n     *\n     * @param activeCell - The cell from where the drag event is triggered\n     * @param selectedCells - The cells to be dragged\n     */\n    function createCellDragImage(activeCell, selectedCells) {\n        const count = selectedCells.length;\n        let promptNumber;\n        if (activeCell.model.type === 'code') {\n            const executionCount = activeCell.model\n                .executionCount;\n            promptNumber = ' ';\n            if (executionCount) {\n                promptNumber = executionCount.toString();\n            }\n        }\n        else {\n            promptNumber = '';\n        }\n        const cellContent = activeCell.model.value.text.split('\\n')[0].slice(0, 26);\n        if (count > 1) {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n        }\n        else {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n        }\n    }\n    CellDragUtils.createCellDragImage = createCellDragImage;\n})(CellDragUtils || (CellDragUtils = {}));\n//# sourceMappingURL=celldragutils.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport * as React from 'react';\n/**\n * The CSS class added to all collapsers.\n */\nconst COLLAPSER_CLASS = 'jp-Collapser';\n/**\n * The CSS class added to the collapser child.\n */\nconst COLLAPSER_CHILD_CLASS = 'jp-Collapser-child';\n/**\n * The CSS class added to input collapsers.\n */\nconst INPUT_COLLAPSER = 'jp-InputCollapser';\n/**\n * The CSS class added to output collapsers.\n */\nconst OUTPUT_COLLAPSER = 'jp-OutputCollapser';\n/**\n * Abstract collapser base class.\n *\n * ### Notes\n * A collapser is a visible div to the left of a cell's\n * input/output that a user can click on to collapse the\n * input/output.\n */\nexport class Collapser extends ReactWidget {\n    /**\n     * Construct a new collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(COLLAPSER_CLASS);\n    }\n    /**\n     * Is the input/output of the parent collapsed.\n     */\n    get collapsed() {\n        return false;\n    }\n    /**\n     * Render the collapser with the virtual DOM.\n     */\n    render() {\n        const childClass = COLLAPSER_CHILD_CLASS;\n        return React.createElement(\"div\", { className: childClass, onClick: e => this.handleClick(e) });\n    }\n}\n/**\n * A collapser subclass to collapse a cell's input area.\n */\nexport class InputCollapser extends Collapser {\n    /**\n     * Construct a new input collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(INPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's input collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.inputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's input.\n     */\n    handleClick(e) {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.inputHidden = !cell.inputHidden;\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n/**\n * A collapser subclass to collapse a cell's output area.\n */\nexport class OutputCollapser extends Collapser {\n    /**\n     * Construct a new output collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(OUTPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's output collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.outputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's output.\n     */\n    handleClick(e) {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.outputHidden = !cell.outputHidden;\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n//# sourceMappingURL=collapser.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Widget } from '@lumino/widgets';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-CellHeader';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-CellFooter';\n/**\n * Default implementation of a cell header.\n */\nexport class CellHeader extends Widget {\n    /**\n     * Construct a new cell header.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_HEADER_CLASS);\n    }\n}\n/**\n * Default implementation of a cell footer.\n */\nexport class CellFooter extends Widget {\n    /**\n     * Construct a new cell footer.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_FOOTER_CLASS);\n    }\n}\n//# sourceMappingURL=headerfooter.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PanelLayout } from '@lumino/widgets';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { CodeMirrorEditorFactory } from '@jupyterlab/codemirror';\n/**\n * The class name added to input area widgets.\n */\nconst INPUT_AREA_CLASS = 'jp-InputArea';\n/**\n * The class name added to the prompt area of cell.\n */\nconst INPUT_AREA_PROMPT_CLASS = 'jp-InputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst INPUT_PROMPT_CLASS = 'jp-InputPrompt';\n/**\n * The class name added to the editor area of the cell.\n */\nconst INPUT_AREA_EDITOR_CLASS = 'jp-InputArea-editor';\n/** ****************************************************************************\n * InputArea\n ******************************************************************************/\n/**\n * An input area widget, which hosts a prompt and an editor widget.\n */\nexport class InputArea extends Widget {\n    /**\n     * Construct an input area widget.\n     */\n    constructor(options) {\n        super();\n        this.addClass(INPUT_AREA_CLASS);\n        const model = (this.model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || InputArea.defaultContentFactory);\n        // Prompt\n        const prompt = (this._prompt = contentFactory.createInputPrompt());\n        prompt.addClass(INPUT_AREA_PROMPT_CLASS);\n        // Editor\n        const editorOptions = {\n            model,\n            factory: contentFactory.editorFactory,\n            updateOnShow: options.updateOnShow\n        };\n        const editor = (this._editor = new CodeEditorWrapper(editorOptions));\n        editor.addClass(INPUT_AREA_EDITOR_CLASS);\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(prompt);\n        layout.addWidget(editor);\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._editor;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._editor.editor;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        return this._prompt.node;\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        const layout = this.layout;\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.hide();\n        this._rendered = widget;\n        layout.addWidget(widget);\n    }\n    /**\n     * Show the text editor.\n     */\n    showEditor() {\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.show();\n    }\n    /**\n     * Set the prompt of the input area.\n     */\n    setPrompt(value) {\n        this._prompt.executionCount = value;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._prompt = null;\n        this._editor = null;\n        this._rendered = null;\n        super.dispose();\n    }\n}\n/**\n * A namespace for `InputArea` statics.\n */\n(function (InputArea) {\n    /**\n     * Default implementation of `IContentFactory`.\n     *\n     * This defaults to using an `editorFactory` based on CodeMirror.\n     */\n    class ContentFactory {\n        /**\n         * Construct a `ContentFactory`.\n         */\n        constructor(options = {}) {\n            this._editor = options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * Return the `CodeEditor.Factory` being used.\n         */\n        get editorFactory() {\n            return this._editor;\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n    }\n    InputArea.ContentFactory = ContentFactory;\n    /**\n     * A function to create the default CodeMirror editor factory.\n     */\n    function _createDefaultEditorFactory() {\n        const editorServices = new CodeMirrorEditorFactory();\n        return editorServices.newInlineEditor;\n    }\n    /**\n     * The default editor factory singleton based on CodeMirror.\n     */\n    InputArea.defaultEditorFactory = _createDefaultEditorFactory();\n    /**\n     * The default `ContentFactory` instance.\n     */\n    InputArea.defaultContentFactory = new ContentFactory({});\n})(InputArea || (InputArea = {}));\n/**\n * The default input prompt implementation.\n */\nexport class InputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(INPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = ' ';\n        }\n        else {\n            this.node.textContent = `[${value || ' '}]:`;\n        }\n    }\n}\n//# sourceMappingURL=inputarea.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ObservableMap } from '@jupyterlab/observables';\nimport { AttachmentModel, imageRendererFactory } from '@jupyterlab/rendermime';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of the IAttachmentsModel.\n */\nexport class AttachmentsModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        this._map = new ObservableMap();\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._modelDB = null;\n        this._serialized = null;\n        this._changeGuard = false;\n        this.contentFactory =\n            options.contentFactory || AttachmentsModel.defaultContentFactory;\n        if (options.values) {\n            for (const key of Object.keys(options.values)) {\n                if (options.values[key] !== undefined) {\n                    this.set(key, options.values[key]);\n                }\n            }\n        }\n        this._map.changed.connect(this._onMapChanged, this);\n        // If we are given a IModelDB, keep an up-to-date\n        // serialized copy of the AttachmentsModel in it.\n        if (options.modelDB) {\n            this._modelDB = options.modelDB;\n            this._serialized = this._modelDB.createValue('attachments');\n            if (this._serialized.get()) {\n                this.fromJSON(this._serialized.get());\n            }\n            else {\n                this._serialized.set(this.toJSON());\n            }\n            this._serialized.changed.connect(this._onSerializedChanged, this);\n        }\n    }\n    /**\n     * A signal emitted when the model state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The keys of the attachments in the model.\n     */\n    get keys() {\n        return this._map.keys();\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this._map.keys().length;\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._map.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Whether the specified key is set.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get an item at the specified key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Set the value at the specified key.\n     */\n    set(key, value) {\n        // Normalize stream data.\n        const item = this._createItem({ value });\n        this._map.set(key, item);\n    }\n    /**\n     * Remove the attachment whose name is the specified key\n     */\n    remove(key) {\n        this._map.delete(key);\n    }\n    /**\n     * Clear all of the attachments.\n     */\n    clear() {\n        this._map.values().forEach((item) => {\n            item.dispose();\n        });\n        this._map.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        Object.keys(values).forEach(key => {\n            if (values[key] !== undefined) {\n                this.set(key, values[key]);\n            }\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const ret = {};\n        for (const key of this._map.keys()) {\n            ret[key] = this._map.get(key).toJSON();\n        }\n        return ret;\n    }\n    /**\n     * Create an attachment item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createAttachmentModel(options);\n        item.changed.connect(this._onGenericChange, this);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onMapChanged(sender, args) {\n        if (this._serialized && !this._changeGuard) {\n            this._changeGuard = true;\n            this._serialized.set(this.toJSON());\n            this._changeGuard = false;\n        }\n        this._changed.emit(args);\n        this._stateChanged.emit(void 0);\n    }\n    /**\n     * If the serialized version of the outputs have changed due to a remote\n     * action, then update the model accordingly.\n     */\n    _onSerializedChanged(sender, args) {\n        if (!this._changeGuard) {\n            this._changeGuard = true;\n            this.fromJSON(args.newValue);\n            this._changeGuard = false;\n        }\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange() {\n        this._stateChanged.emit(void 0);\n    }\n}\n/**\n * The namespace for AttachmentsModel class statics.\n */\n(function (AttachmentsModel) {\n    /**\n     * The default implementation of a `IAttachemntsModel.IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachment model.\n         */\n        createAttachmentModel(options) {\n            return new AttachmentModel(options);\n        }\n    }\n    AttachmentsModel.ContentFactory = ContentFactory;\n    /**\n     * The default attachment model factory.\n     */\n    AttachmentsModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsModel || (AttachmentsModel = {}));\n/**\n * A resolver for cell attachments 'attchment:filename'.\n *\n * Will resolve to a data: url.\n */\nexport class AttachmentsResolver {\n    /**\n     * Create an attachments resolver object.\n     */\n    constructor(options) {\n        this._parent = options.parent || null;\n        this._model = options.model;\n    }\n    /**\n     * Resolve a relative url to a correct server path.\n     */\n    async resolveUrl(url) {\n        if (this._parent && !url.startsWith('attachment:')) {\n            return this._parent.resolveUrl(url);\n        }\n        return url;\n    }\n    /**\n     * Get the download url of a given absolute server path.\n     *\n     * #### Notes\n     * The returned URL may include a query parameter.\n     */\n    async getDownloadUrl(path) {\n        if (this._parent && !path.startsWith('attachment:')) {\n            return this._parent.getDownloadUrl(path);\n        }\n        // Return a data URL with the data of the url\n        const key = path.slice('attachment:'.length);\n        const attachment = this._model.get(key);\n        if (attachment === undefined) {\n            // Resolve with unprocessed path, to show as broken image\n            return path;\n        }\n        const { data } = attachment;\n        const mimeType = Object.keys(data)[0];\n        // Only support known safe types:\n        if (mimeType === undefined ||\n            imageRendererFactory.mimeTypes.indexOf(mimeType) === -1) {\n            throw new Error(`Cannot render unknown image mime type \"${mimeType}\".`);\n        }\n        const dataUrl = `data:${mimeType};base64,${data[mimeType]}`;\n        return dataUrl;\n    }\n    /**\n     * Whether the URL should be handled by the resolver\n     * or not.\n     */\n    isLocal(url) {\n        var _a, _b, _c;\n        if (this._parent && !url.startsWith('attachment:')) {\n            return (_c = (_b = (_a = this._parent).isLocal) === null || _b === void 0 ? void 0 : _b.call(_a, url)) !== null && _c !== void 0 ? _c : true;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { each, map, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ObservableList } from '@jupyterlab/observables';\nimport { OutputModel } from '@jupyterlab/rendermime';\nimport { JSONExt } from '@lumino/coreutils';\n/**\n * The default implementation of the IOutputAreaModel.\n */\nexport class OutputAreaModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        /**\n         * A flag that is set when we want to clear the output area\n         * *after* the next addition to it.\n         */\n        this.clearNext = false;\n        this._trusted = false;\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._trusted = !!options.trusted;\n        this.contentFactory =\n            options.contentFactory || OutputAreaModel.defaultContentFactory;\n        this.list = new ObservableList();\n        if (options.values) {\n            each(options.values, value => {\n                this._add(value);\n            });\n        }\n        this.list.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * A signal emitted when the model state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this.list ? this.list.length : 0;\n    }\n    /**\n     * Get whether the model is trusted.\n     */\n    get trusted() {\n        return this._trusted;\n    }\n    /**\n     * Set whether the model is trusted.\n     *\n     * #### Notes\n     * Changing the value will cause all of the models to re-set.\n     */\n    set trusted(value) {\n        if (value === this._trusted) {\n            return;\n        }\n        const trusted = (this._trusted = value);\n        for (let i = 0; i < this.list.length; i++) {\n            let item = this.list.get(i);\n            const value = item.toJSON();\n            item.dispose();\n            item = this._createItem({ value, trusted });\n            this.list.set(i, item);\n        }\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.list.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Get an item at the specified index.\n     */\n    get(index) {\n        return this.list.get(index);\n    }\n    /**\n     * Set the value at the specified index.\n     */\n    set(index, value) {\n        value = JSONExt.deepCopy(value);\n        // Normalize stream data.\n        Private.normalize(value);\n        const item = this._createItem({ value, trusted: this._trusted });\n        this.list.set(index, item);\n    }\n    /**\n     * Add an output, which may be combined with previous output.\n     *\n     * @returns The total number of outputs.\n     *\n     * #### Notes\n     * The output bundle is copied.\n     * Contiguous stream outputs of the same `name` are combined.\n     */\n    add(output) {\n        // If we received a delayed clear message, then clear now.\n        if (this.clearNext) {\n            this.clear();\n            this.clearNext = false;\n        }\n        return this._add(output);\n    }\n    /**\n     * Clear all of the output.\n     *\n     * @param wait Delay clearing the output until the next message is added.\n     */\n    clear(wait = false) {\n        this._lastStream = '';\n        if (wait) {\n            this.clearNext = true;\n            return;\n        }\n        each(this.list, (item) => {\n            item.dispose();\n        });\n        this.list.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        each(values, value => {\n            this._add(value);\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return toArray(map(this.list, (output) => output.toJSON()));\n    }\n    /**\n     * Add a copy of the item to the list.\n     */\n    _add(value) {\n        const trusted = this._trusted;\n        value = JSONExt.deepCopy(value);\n        // Normalize the value.\n        Private.normalize(value);\n        // Consolidate outputs if they are stream outputs of the same kind.\n        if (nbformat.isStream(value) &&\n            this._lastStream &&\n            value.name === this._lastName &&\n            this.shouldCombine({\n                value,\n                lastModel: this.list.get(this.length - 1)\n            })) {\n            // In order to get a list change event, we add the previous\n            // text to the current item and replace the previous item.\n            // This also replaces the metadata of the last item.\n            this._lastStream += value.text;\n            this._lastStream = Private.removeOverwrittenChars(this._lastStream);\n            value.text = this._lastStream;\n            const item = this._createItem({ value, trusted });\n            const index = this.length - 1;\n            const prev = this.list.get(index);\n            prev.dispose();\n            this.list.set(index, item);\n            return index;\n        }\n        if (nbformat.isStream(value)) {\n            value.text = Private.removeOverwrittenChars(value.text);\n        }\n        // Create the new item.\n        const item = this._createItem({ value, trusted });\n        // Update the stream information.\n        if (nbformat.isStream(value)) {\n            this._lastStream = value.text;\n            this._lastName = value.name;\n        }\n        else {\n            this._lastStream = '';\n        }\n        // Add the item to our list and return the new length.\n        return this.list.push(item);\n    }\n    /**\n     * Whether a new value should be consolidated with the previous output.\n     *\n     * This will only be called if the minimal criteria of both being stream\n     * messages of the same type.\n     */\n    shouldCombine(options) {\n        return true;\n    }\n    /**\n     * Create an output item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createOutputModel(options);\n        item.changed.connect(this._onGenericChange, this);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onListChanged(sender, args) {\n        this._changed.emit(args);\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange() {\n        this._stateChanged.emit(void 0);\n    }\n}\n/**\n * The namespace for OutputAreaModel class statics.\n */\n(function (OutputAreaModel) {\n    /**\n     * The default implementation of a `IModelOutputFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output model.\n         */\n        createOutputModel(options) {\n            return new OutputModel(options);\n        }\n    }\n    OutputAreaModel.ContentFactory = ContentFactory;\n    /**\n     * The default output model factory.\n     */\n    OutputAreaModel.defaultContentFactory = new ContentFactory();\n})(OutputAreaModel || (OutputAreaModel = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Normalize an output.\n     */\n    function normalize(value) {\n        if (nbformat.isStream(value)) {\n            if (Array.isArray(value.text)) {\n                value.text = value.text.join('\\n');\n            }\n        }\n    }\n    Private.normalize = normalize;\n    /**\n     * Remove characters that are overridden by backspace characters.\n     */\n    function fixBackspace(txt) {\n        let tmp = txt;\n        do {\n            txt = tmp;\n            // Cancel out anything-but-newline followed by backspace\n            tmp = txt.replace(/[^\\n]\\x08/gm, ''); // eslint-disable-line no-control-regex\n        } while (tmp.length < txt.length);\n        return txt;\n    }\n    /**\n     * Remove chunks that should be overridden by the effect of\n     * carriage return characters.\n     */\n    function fixCarriageReturn(txt) {\n        txt = txt.replace(/\\r+\\n/gm, '\\n'); // \\r followed by \\n --> newline\n        while (txt.search(/\\r[^$]/g) > -1) {\n            const base = txt.match(/^(.*)\\r+/m)[1];\n            let insert = txt.match(/\\r+(.*)$/m)[1];\n            insert = insert + base.slice(insert.length, base.length);\n            txt = txt.replace(/\\r+.*$/m, '\\r').replace(/^.*\\r/m, insert);\n        }\n        return txt;\n    }\n    /*\n     * Remove characters overridden by backspaces and carriage returns\n     */\n    function removeOverwrittenChars(text) {\n        return fixCarriageReturn(fixBackspace(text));\n    }\n    Private.removeOverwrittenChars = removeOverwrittenChars;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { AttachmentsModel } from '@jupyterlab/attachments';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport * as models from '@jupyterlab/shared-models';\nimport { UUID } from '@lumino/coreutils';\nimport { OutputAreaModel } from '@jupyterlab/outputarea';\nexport function isCodeCellModel(model) {\n    return model.type === 'code';\n}\nexport function isMarkdownCellModel(model) {\n    return model.type === 'markdown';\n}\nexport function isRawCellModel(model) {\n    return model.type === 'raw';\n}\n/**\n * An implementation of the cell model.\n */\nexport class CellModel extends CodeEditor.Model {\n    /**\n     * Construct a cell model from optional cell content.\n     */\n    constructor(options) {\n        var _a;\n        super({\n            modelDB: options.modelDB,\n            id: options.id || ((_a = options.cell) === null || _a === void 0 ? void 0 : _a.id) || UUID.uuid4()\n        });\n        /**\n         * A signal emitted when the state of the model changes.\n         */\n        this.contentChanged = new Signal(this);\n        /**\n         * A signal emitted when a model state changes.\n         */\n        this.stateChanged = new Signal(this);\n        /**\n         * A mutex to update the shared model.\n         */\n        this._modelDBMutex = models.createMutex();\n        this.value.changed.connect(this.onGenericChange, this);\n        const cellType = this.modelDB.createValue('type');\n        cellType.set(this.type);\n        const observableMetadata = this.modelDB.createMap('metadata');\n        observableMetadata.changed.connect(this.onModelDBMetadataChange, this);\n        observableMetadata.changed.connect(this.onGenericChange, this);\n        const cell = options.cell;\n        const trusted = this.modelDB.createValue('trusted');\n        trusted.changed.connect(this.onTrustedChanged, this);\n        if (!cell) {\n            trusted.set(false);\n            return;\n        }\n        trusted.set(!!cell.metadata['trusted']);\n        delete cell.metadata['trusted'];\n        if (Array.isArray(cell.source)) {\n            this.value.text = cell.source.join('');\n        }\n        else {\n            this.value.text = cell.source;\n        }\n        const metadata = JSONExt.deepCopy(cell.metadata);\n        if (this.type !== 'raw') {\n            delete metadata['format'];\n        }\n        if (this.type !== 'code') {\n            delete metadata['collapsed'];\n            delete metadata['scrolled'];\n        }\n        for (const key in metadata) {\n            observableMetadata.set(key, metadata[key]);\n        }\n    }\n    /**\n     * The type of cell.\n     */\n    get type() {\n        // This getter really should be abstract, but our current constructor\n        // depends on .type working\n        return 'raw';\n    }\n    /**\n     * The id for the cell.\n     */\n    get id() {\n        return this.sharedModel.getId();\n    }\n    /**\n     * The metadata associated with the cell.\n     */\n    get metadata() {\n        return this.modelDB.get('metadata');\n    }\n    /**\n     * Get the trusted state of the model.\n     */\n    get trusted() {\n        return this.modelDB.getValue('trusted');\n    }\n    /**\n     * Set the trusted state of the model.\n     */\n    set trusted(newValue) {\n        const oldValue = this.trusted;\n        if (oldValue === newValue) {\n            return;\n        }\n        this.modelDB.setValue('trusted', newValue);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const metadata = Object.create(null);\n        for (const key of this.metadata.keys()) {\n            const value = JSON.parse(JSON.stringify(this.metadata.get(key)));\n            metadata[key] = value;\n        }\n        if (this.trusted) {\n            metadata['trusted'] = true;\n        }\n        return {\n            cell_type: this.type,\n            source: this.value.text,\n            metadata\n        };\n    }\n    /**\n     * Handle a change to the trusted state.\n     *\n     * The default implementation is a no-op.\n     */\n    onTrustedChanged(trusted, args) {\n        /* no-op */\n    }\n    /**\n     * Handle a change to the cell metadata modelDB and reflect it in the shared model.\n     */\n    onModelDBMetadataChange(sender, event) {\n        const metadata = this.sharedModel.getMetadata();\n        this._modelDBMutex(() => {\n            switch (event.type) {\n                case 'add':\n                    this._changeCellMetata(metadata, event);\n                    break;\n                case 'change':\n                    this._changeCellMetata(metadata, event);\n                    break;\n                case 'remove':\n                    delete metadata[event.key];\n                    break;\n                default:\n                    throw new Error(`Invalid event type: ${event.type}`);\n            }\n            this.sharedModel.setMetadata(metadata);\n        });\n    }\n    /**\n     * Change the cell metadata for a given event.\n     *\n     * @param metadata The cell metadata.\n     * @param event The event to handle.\n     */\n    _changeCellMetata(metadata, event) {\n        switch (event.key) {\n            case 'jupyter':\n                metadata.jupyter = event.newValue;\n                break;\n            case 'collapsed':\n                metadata.collapsed = event.newValue;\n                break;\n            case 'name':\n                metadata.name = event.newValue;\n                break;\n            case 'scrolled':\n                metadata.scrolled = event.newValue;\n                break;\n            case 'tags':\n                metadata.tags = event.newValue;\n                break;\n            case 'trusted':\n                metadata.trusted = event.newValue;\n                break;\n            default:\n                // The default is applied for custom metadata that are not\n                // defined in the official nbformat but which are defined\n                // by the user.\n                metadata[event.key] = event.newValue;\n        }\n    }\n    /**\n     * Handle a change to the cell shared model and reflect it in modelDB.\n     * We update the modeldb metadata when the shared model changes.\n     *\n     * This method overrides the CodeEditor protected _onSharedModelChanged\n     * so we first call super._onSharedModelChanged\n     *\n     * @override CodeEditor._onSharedModelChanged\n     */\n    _onSharedModelChanged(sender, change) {\n        super._onSharedModelChanged(sender, change);\n        this._modelDBMutex(() => {\n            var _a;\n            if (change.metadataChange) {\n                const newValue = (_a = change.metadataChange) === null || _a === void 0 ? void 0 : _a.newValue;\n                if (newValue) {\n                    Object.keys(newValue).map(key => {\n                        switch (key) {\n                            case 'collapsed':\n                                this.metadata.set('collapsed', newValue.jupyter);\n                                break;\n                            case 'jupyter':\n                                this.metadata.set('jupyter', newValue.jupyter);\n                                break;\n                            case 'name':\n                                this.metadata.set('name', newValue.name);\n                                break;\n                            case 'scrolled':\n                                this.metadata.set('scrolled', newValue.scrolled);\n                                break;\n                            case 'tags':\n                                this.metadata.set('tags', newValue.tags);\n                                break;\n                            case 'trusted':\n                                this.metadata.set('trusted', newValue.trusted);\n                                break;\n                            default:\n                                // The default is applied for custom metadata that are not\n                                // defined in the official nbformat but which are defined\n                                // by the user.\n                                this.metadata.set(key, newValue[key]);\n                        }\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * Handle a change to the observable value.\n     */\n    onGenericChange() {\n        this.contentChanged.emit(void 0);\n    }\n}\n/**\n * A base implementation for cell models with attachments.\n */\nexport class AttachmentsCellModel extends CellModel {\n    /**\n     * Construct a new cell with optional attachments.\n     */\n    constructor(options) {\n        super(options);\n        const factory = options.contentFactory || AttachmentsCellModel.defaultContentFactory;\n        let attachments;\n        const cell = options.cell;\n        if (cell && (cell.cell_type === 'raw' || cell.cell_type === 'markdown')) {\n            attachments = cell\n                .attachments;\n        }\n        this._attachments = factory.createAttachmentsModel({\n            values: attachments,\n            modelDB: this.modelDB\n        });\n        this._attachments.stateChanged.connect(this.onGenericChange, this);\n    }\n    /**\n     * Get the attachments of the model.\n     */\n    get attachments() {\n        return this._attachments;\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        if (this.attachments.length) {\n            cell.attachments = this.attachments.toJSON();\n        }\n        return cell;\n    }\n}\n/**\n * The namespace for `AttachmentsCellModel` statics.\n */\n(function (AttachmentsCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachments model.\n         */\n        createAttachmentsModel(options) {\n            return new AttachmentsModel(options);\n        }\n    }\n    AttachmentsCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    AttachmentsCellModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsCellModel || (AttachmentsCellModel = {}));\n/**\n * An implementation of a raw cell model.\n */\nexport class RawCellModel extends AttachmentsCellModel {\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a markdown cell model.\n */\nexport class MarkdownCellModel extends AttachmentsCellModel {\n    /**\n     * Construct a markdown cell model from optional cell content.\n     */\n    constructor(options) {\n        super(options);\n        // Use the Github-flavored markdown mode.\n        this.mimeType = 'text/x-ipythongfm';\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a code cell Model.\n */\nexport class CodeCellModel extends CellModel {\n    /**\n     * Construct a new code cell with optional original cell content.\n     */\n    constructor(options) {\n        super(options);\n        const factory = options.contentFactory || CodeCellModel.defaultContentFactory;\n        const trusted = this.trusted;\n        const cell = options.cell;\n        let outputs = [];\n        const executionCount = this.modelDB.createValue('executionCount');\n        if (!executionCount.get()) {\n            if (cell && cell.cell_type === 'code') {\n                executionCount.set(cell.execution_count || null);\n                outputs = cell.outputs;\n            }\n            else {\n                executionCount.set(null);\n            }\n        }\n        executionCount.changed.connect(this._onExecutionCountChanged, this);\n        this._modelDBMutex(() => {\n            const sharedCell = this.sharedModel;\n            sharedCell.setOutputs(outputs !== null && outputs !== void 0 ? outputs : []);\n        });\n        this._outputs = factory.createOutputArea({ trusted, values: outputs });\n        this._outputs.changed.connect(this.onGenericChange, this);\n        this._outputs.changed.connect(this.onModelDBOutputsChange, this);\n        // We keep `collapsed` and `jupyter.outputs_hidden` metadata in sync, since\n        // they are redundant in nbformat 4.4. See\n        // https://github.com/jupyter/nbformat/issues/137\n        this.metadata.changed.connect(Private.collapseChanged, this);\n        // Sync `collapsed` and `jupyter.outputs_hidden` for the first time, giving\n        // preference to `collapsed`.\n        if (this.metadata.has('collapsed')) {\n            const collapsed = this.metadata.get('collapsed');\n            Private.collapseChanged(this.metadata, {\n                type: 'change',\n                key: 'collapsed',\n                oldValue: collapsed,\n                newValue: collapsed\n            });\n        }\n        else if (this.metadata.has('jupyter')) {\n            const jupyter = this.metadata.get('jupyter');\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                Private.collapseChanged(this.metadata, {\n                    type: 'change',\n                    key: 'jupyter',\n                    oldValue: jupyter,\n                    newValue: jupyter\n                });\n            }\n        }\n    }\n    switchSharedModel(sharedModel, reinitialize) {\n        if (reinitialize) {\n            this.clearExecution();\n            sharedModel.getOutputs().forEach(output => this._outputs.add(output));\n        }\n        super.switchSharedModel(sharedModel, reinitialize);\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'code';\n    }\n    /**\n     * The execution count of the cell.\n     */\n    get executionCount() {\n        return this.modelDB.getValue('executionCount');\n    }\n    set executionCount(newValue) {\n        const oldValue = this.executionCount;\n        if (newValue === oldValue) {\n            return;\n        }\n        this.modelDB.setValue('executionCount', newValue || null);\n    }\n    clearExecution() {\n        this.outputs.clear();\n        this.executionCount = null;\n        this.metadata.delete('execution');\n    }\n    /**\n     * The cell outputs.\n     */\n    get outputs() {\n        return this._outputs;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._outputs.dispose();\n        this._outputs = null;\n        super.dispose();\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.execution_count = this.executionCount || null;\n        cell.outputs = this.outputs.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n    /**\n     * Handle a change to the trusted state.\n     */\n    onTrustedChanged(trusted, args) {\n        if (this._outputs) {\n            this._outputs.trusted = args.newValue;\n        }\n        this.stateChanged.emit({\n            name: 'trusted',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n    }\n    /**\n     * Handle a change to the cell outputs modelDB and reflect it in the shared model.\n     */\n    onModelDBOutputsChange(sender, event) {\n        const codeCell = this.sharedModel;\n        this._modelDBMutex(() => {\n            switch (event.type) {\n                case 'add': {\n                    const outputs = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.newIndex, event.newIndex + outputs.length, outputs);\n                    break;\n                }\n                case 'set': {\n                    const newValues = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.oldIndex, event.oldValues.length, newValues);\n                    break;\n                }\n                case 'remove':\n                    codeCell.updateOutputs(event.oldIndex, event.oldValues.length);\n                    break;\n                default:\n                    throw new Error(`Invalid event type: ${event.type}`);\n            }\n        });\n    }\n    /**\n     * Handle a change to the output shared model and reflect it in modelDB.\n     * We update the modeldb metadata when the nbcell changes.\n     *\n     * This method overrides the CellModel protected _onSharedModelChanged\n     * so we first call super._onSharedModelChanged\n     *\n     * @override CellModel._onSharedModelChanged\n     */\n    _onSharedModelChanged(sender, change) {\n        super._onSharedModelChanged(sender, change);\n        this._modelDBMutex(() => {\n            if (change.outputsChange) {\n                this.clearExecution();\n                sender.getOutputs().forEach(output => this._outputs.add(output));\n            }\n            if (change.executionCountChange) {\n                this.executionCount = change.executionCountChange.newValue\n                    ? change.executionCountChange.newValue\n                    : null;\n            }\n        });\n    }\n    /**\n     * Handle a change to the execution count.\n     */\n    _onExecutionCountChanged(count, args) {\n        const codeCell = this.sharedModel;\n        this._modelDBMutex(() => {\n            codeCell.execution_count = args.newValue\n                ? args.newValue\n                : null;\n        });\n        this.contentChanged.emit(void 0);\n        this.stateChanged.emit({\n            name: 'executionCount',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n    }\n}\n/**\n * The namespace for `CodeCellModel` statics.\n */\n(function (CodeCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output area.\n         */\n        createOutputArea(options) {\n            return new OutputAreaModel(options);\n        }\n    }\n    CodeCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    CodeCellModel.defaultContentFactory = new ContentFactory();\n})(CodeCellModel || (CodeCellModel = {}));\nvar Private;\n(function (Private) {\n    function collapseChanged(metadata, args) {\n        if (args.key === 'collapsed') {\n            const jupyter = (metadata.get('jupyter') || {});\n            const { outputs_hidden } = jupyter, newJupyter = __rest(jupyter, [\"outputs_hidden\"]);\n            if (outputs_hidden !== args.newValue) {\n                if (args.newValue !== undefined) {\n                    newJupyter['outputs_hidden'] = args.newValue;\n                }\n                if (Object.keys(newJupyter).length === 0) {\n                    metadata.delete('jupyter');\n                }\n                else {\n                    metadata.set('jupyter', newJupyter);\n                }\n            }\n        }\n        else if (args.key === 'jupyter') {\n            const jupyter = (args.newValue || {});\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                metadata.set('collapsed', jupyter.outputs_hidden);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n    }\n    Private.collapseChanged = collapseChanged;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport * as React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { ellipsesIcon } from '@jupyterlab/ui-components';\n/**\n * The CSS class added to placeholders.\n */\nconst PLACEHOLDER_CLASS = 'jp-Placeholder';\n/**\n * The CSS classes added to input placeholder prompts.\n */\nconst INPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-InputPrompt';\n/**\n * The CSS classes added to output placeholder prompts.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-OutputPrompt';\n/**\n * The CSS class added to placeholder content.\n */\nconst CONTENT_CLASS = 'jp-Placeholder-content';\n/**\n * The CSS class added to input placeholders.\n */\nconst INPUT_PLACEHOLDER_CLASS = 'jp-InputPlaceholder';\n/**\n * The CSS class added to output placeholders.\n */\nconst OUTPUT_PLACEHOLDER_CLASS = 'jp-OutputPlaceholder';\n/**\n * An abstract base class for placeholders\n *\n * ### Notes\n * A placeholder is the element that is shown when input/output\n * is hidden.\n */\nexport class Placeholder extends ReactWidget {\n    /**\n     * Construct a new placeholder.\n     */\n    constructor(callback) {\n        super();\n        this.addClass(PLACEHOLDER_CLASS);\n        this._callback = callback;\n    }\n    /**\n     * Handle the click event.\n     */\n    handleClick(e) {\n        const callback = this._callback;\n        callback(e);\n    }\n}\n/**\n * The input placeholder class.\n */\nexport class InputPlaceholder extends Placeholder {\n    /**\n     * Construct a new input placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(INPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the input placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: INPUT_PROMPT_CLASS, key: \"input\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n/**\n * The output placeholder class.\n */\nexport class OutputPlaceholder extends Placeholder {\n    /**\n     * Construct a new output placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(OUTPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the output placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: OUTPUT_PROMPT_CLASS, key: \"output\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n//# sourceMappingURL=placeholder.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, PanelLayout } from '@lumino/widgets';\nimport { Widget } from '@lumino/widgets';\nimport { KernelMessage } from '@jupyterlab/services';\n/**\n * The class name added to an output area widget.\n */\nconst OUTPUT_AREA_CLASS = 'jp-OutputArea';\n/**\n * The class name added to the direction children of OutputArea\n */\nconst OUTPUT_AREA_ITEM_CLASS = 'jp-OutputArea-child';\n/**\n * The class name added to actual outputs\n */\nconst OUTPUT_AREA_OUTPUT_CLASS = 'jp-OutputArea-output';\n/**\n * The class name added to prompt children of OutputArea.\n */\nconst OUTPUT_AREA_PROMPT_CLASS = 'jp-OutputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-OutputPrompt';\n/**\n * The class name added to an execution result.\n */\nconst EXECUTE_CLASS = 'jp-OutputArea-executeResult';\n/**\n * The class name added stdin items of OutputArea\n */\nconst OUTPUT_AREA_STDIN_ITEM_CLASS = 'jp-OutputArea-stdin-item';\n/**\n * The class name added to stdin widgets.\n */\nconst STDIN_CLASS = 'jp-Stdin';\n/**\n * The class name added to stdin data prompt nodes.\n */\nconst STDIN_PROMPT_CLASS = 'jp-Stdin-prompt';\n/**\n * The class name added to stdin data input nodes.\n */\nconst STDIN_INPUT_CLASS = 'jp-Stdin-input';\n/** ****************************************************************************\n * OutputArea\n ******************************************************************************/\n/**\n * An output area widget.\n *\n * #### Notes\n * The widget model must be set separately and can be changed\n * at any time.  Consumers of the widget must account for a\n * `null` model, and may want to listen to the `modelChanged`\n * signal.\n */\nexport class OutputArea extends Widget {\n    /**\n     * Construct an output area widget.\n     */\n    constructor(options) {\n        super();\n        /**\n         * A public signal used to indicate the number of outputs has changed.\n         *\n         * #### Notes\n         * This is useful for parents who want to apply styling based on the number\n         * of outputs. Emits the current number of outputs.\n         */\n        this.outputLengthChanged = new Signal(this);\n        /**\n         * Handle an iopub message.\n         */\n        this._onIOPub = (msg) => {\n            const model = this.model;\n            const msgType = msg.header.msg_type;\n            let output;\n            const transient = (msg.content.transient || {});\n            const displayId = transient['display_id'];\n            let targets;\n            switch (msgType) {\n                case 'execute_result':\n                case 'display_data':\n                case 'stream':\n                case 'error':\n                    output = Object.assign(Object.assign({}, msg.content), { output_type: msgType });\n                    model.add(output);\n                    break;\n                case 'clear_output': {\n                    const wait = msg.content.wait;\n                    model.clear(wait);\n                    break;\n                }\n                case 'update_display_data':\n                    output = Object.assign(Object.assign({}, msg.content), { output_type: 'display_data' });\n                    targets = this._displayIdMap.get(displayId);\n                    if (targets) {\n                        for (const index of targets) {\n                            model.set(index, output);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n            if (displayId && msgType === 'display_data') {\n                targets = this._displayIdMap.get(displayId) || [];\n                targets.push(model.length - 1);\n                this._displayIdMap.set(displayId, targets);\n            }\n        };\n        /**\n         * Handle an execute reply message.\n         */\n        this._onExecuteReply = (msg) => {\n            // API responses that contain a pager are special cased and their type\n            // is overridden from 'execute_reply' to 'display_data' in order to\n            // render output.\n            const model = this.model;\n            const content = msg.content;\n            if (content.status !== 'ok') {\n                return;\n            }\n            const payload = content && content.payload;\n            if (!payload || !payload.length) {\n                return;\n            }\n            const pages = payload.filter((i) => i.source === 'page');\n            if (!pages.length) {\n                return;\n            }\n            const page = JSON.parse(JSON.stringify(pages[0]));\n            const output = {\n                output_type: 'display_data',\n                data: page.data,\n                metadata: {}\n            };\n            model.add(output);\n        };\n        this._minHeightTimeout = null;\n        this._displayIdMap = new Map();\n        const model = (this.model = options.model);\n        this.addClass(OUTPUT_AREA_CLASS);\n        this.rendermime = options.rendermime;\n        this.contentFactory =\n            options.contentFactory || OutputArea.defaultContentFactory;\n        this.layout = new PanelLayout();\n        this.trimmedOutputModels = new Array();\n        this.maxNumberOutputs = options.maxNumberOutputs || 0;\n        this.headTailNumberOutputs = Math.round(this.maxNumberOutputs / 2);\n        this.headEndIndex = this.headTailNumberOutputs;\n        for (let i = 0; i < model.length; i++) {\n            const output = model.get(i);\n            this._insertOutput(i, output);\n        }\n        model.changed.connect(this.onModelChanged, this);\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * A read-only sequence of the chidren widgets in the output area.\n     */\n    get widgets() {\n        return this.layout.widgets;\n    }\n    /**\n     * The kernel future associated with the output area.\n     */\n    get future() {\n        return this._future;\n    }\n    set future(value) {\n        // Bail if the model is disposed.\n        if (this.model.isDisposed) {\n            throw Error('Model is disposed');\n        }\n        if (this._future === value) {\n            return;\n        }\n        if (this._future) {\n            this._future.dispose();\n        }\n        this._future = value;\n        this.model.clear();\n        // Make sure there were no input widgets.\n        if (this.widgets.length) {\n            this._clear();\n            this.outputLengthChanged.emit(this.model.length);\n        }\n        // Handle published messages.\n        value.onIOPub = this._onIOPub;\n        // Handle the execute reply.\n        value.onReply = this._onExecuteReply;\n        // Handle stdin.\n        value.onStdin = msg => {\n            if (KernelMessage.isInputRequestMsg(msg)) {\n                this.onInputRequest(msg, value);\n            }\n        };\n    }\n    /**\n     * Dispose of the resources used by the output area.\n     */\n    dispose() {\n        if (this._future) {\n            this._future.dispose();\n            this._future = null;\n        }\n        this._displayIdMap.clear();\n        super.dispose();\n    }\n    /**\n     * Follow changes on the model state.\n     */\n    onModelChanged(sender, args) {\n        switch (args.type) {\n            case 'add':\n                this._insertOutput(args.newIndex, args.newValues[0]);\n                this.outputLengthChanged.emit(this.model.length);\n                break;\n            case 'remove':\n                if (this.widgets.length) {\n                    // all items removed from model\n                    if (this.model.length === 0) {\n                        this._clear();\n                    }\n                    else {\n                        // range of items removed from model\n                        // remove widgets corresponding to removed model items\n                        const startIndex = args.oldIndex;\n                        for (let i = 0; i < args.oldValues.length && startIndex < this.widgets.length; ++i) {\n                            const widget = this.widgets[startIndex];\n                            widget.parent = null;\n                            widget.dispose();\n                        }\n                        // apply item offset to target model item indices in _displayIdMap\n                        this._moveDisplayIdIndices(startIndex, args.oldValues.length);\n                        // prevent jitter caused by immediate height change\n                        this._preventHeightChangeJitter();\n                    }\n                    this.outputLengthChanged.emit(this.model.length);\n                }\n                break;\n            case 'set':\n                this._setOutput(args.newIndex, args.newValues[0]);\n                this.outputLengthChanged.emit(this.model.length);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Update indices in _displayIdMap in response to element remove from model items\n     * *\n     * @param startIndex - The index of first element removed\n     *\n     * @param count - The number of elements removed from model items\n     *\n     */\n    _moveDisplayIdIndices(startIndex, count) {\n        this._displayIdMap.forEach((indices) => {\n            const rangeEnd = startIndex + count;\n            const numIndices = indices.length;\n            // reverse loop in order to prevent removing element affecting the index\n            for (let i = numIndices - 1; i >= 0; --i) {\n                const index = indices[i];\n                // remove model item indices in removed range\n                if (index >= startIndex && index < rangeEnd) {\n                    indices.splice(i, 1);\n                }\n                else if (index >= rangeEnd) {\n                    // move model item indices that were larger than range end\n                    indices[i] -= count;\n                }\n            }\n        });\n    }\n    /**\n     * Follow changes on the output model state.\n     */\n    onStateChanged(sender) {\n        this.trimmedOutputModels = new Array();\n        for (let i = 0; i < this.model.length; i++) {\n            this._setOutput(i, this.model.get(i));\n        }\n        this.outputLengthChanged.emit(this.model.length);\n    }\n    /**\n     * Clear the widget inputs and outputs.\n     */\n    _clear() {\n        // Bail if there is no work to do.\n        if (!this.widgets.length) {\n            return;\n        }\n        // Remove all of our widgets.\n        const length = this.widgets.length;\n        for (let i = 0; i < length; i++) {\n            const widget = this.widgets[0];\n            widget.parent = null;\n            widget.dispose();\n        }\n        // Clear the display id map.\n        this._displayIdMap.clear();\n        // prevent jitter caused by immediate height change\n        this._preventHeightChangeJitter();\n    }\n    _preventHeightChangeJitter() {\n        // When an output area is cleared and then quickly replaced with new\n        // content (as happens with @interact in widgets, for example), the\n        // quickly changing height can make the page jitter.\n        // We introduce a small delay in the minimum height\n        // to prevent this jitter.\n        const rect = this.node.getBoundingClientRect();\n        this.node.style.minHeight = `${rect.height}px`;\n        if (this._minHeightTimeout) {\n            window.clearTimeout(this._minHeightTimeout);\n        }\n        this._minHeightTimeout = window.setTimeout(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.node.style.minHeight = '';\n        }, 50);\n    }\n    /**\n     * Handle an input request from a kernel.\n     */\n    onInputRequest(msg, future) {\n        // Add an output widget to the end.\n        const factory = this.contentFactory;\n        const stdinPrompt = msg.content.prompt;\n        const password = msg.content.password;\n        const panel = new Panel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        panel.addClass(OUTPUT_AREA_STDIN_ITEM_CLASS);\n        const prompt = factory.createOutputPrompt();\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        const input = factory.createStdin({\n            prompt: stdinPrompt,\n            password,\n            future\n        });\n        input.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(input);\n        const layout = this.layout;\n        layout.addWidget(panel);\n        /**\n         * Wait for the stdin to complete, add it to the model (so it persists)\n         * and remove the stdin widget.\n         */\n        void input.value.then(value => {\n            // Use stdin as the stream so it does not get combined with stdout.\n            this.model.add({\n                output_type: 'stream',\n                name: 'stdin',\n                text: value + '\\n'\n            });\n            panel.dispose();\n        });\n    }\n    /**\n     * Update an output in the layout in place.\n     */\n    _setOutput(index, model) {\n        const layout = this.layout;\n        const panel = layout.widgets[index];\n        const renderer = (panel.widgets\n            ? panel.widgets[1]\n            : panel);\n        // Check whether it is safe to reuse renderer:\n        // - Preferred mime type has not changed\n        // - Isolation has not changed\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (renderer.renderModel &&\n            Private.currentPreferredMimetype.get(renderer) === mimeType &&\n            OutputArea.isIsolated(mimeType, model.metadata) ===\n                renderer instanceof Private.IsolatedRenderer) {\n            void renderer.renderModel(model);\n        }\n        else {\n            layout.widgets[index].dispose();\n            this._insertOutput(index, model);\n        }\n    }\n    /**\n     * Render and insert a single output into the layout.\n     *\n     * @param index - The index of the output to be inserted.\n     * @param model - The model of the output to be inserted.\n     */\n    _insertOutput(index, model) {\n        if (index === 0) {\n            this.trimmedOutputModels = new Array();\n        }\n        if (index === this.maxNumberOutputs && this.maxNumberOutputs !== 0) {\n            // TODO Improve style of the display message.\n            const separatorModel = this.model.contentFactory.createOutputModel({\n                value: {\n                    output_type: 'display_data',\n                    data: {\n                        'text/html': `\n              <a style=\"margin: 10px; text-decoration: none;\">\n                <pre>Output of this cell has been trimmed on the initial display.</pre>\n                <pre>Displaying the first ${this.maxNumberOutputs} top and last bottom outputs.</pre>\n                <pre>Click on this message to get the complete output.</pre>\n              </a>\n              `\n                    }\n                }\n            });\n            const onClick = () => this._showTrimmedOutputs(this.headTailNumberOutputs);\n            const separator = this.createOutputItem(separatorModel);\n            separator.node.addEventListener('click', onClick);\n            const layout = this.layout;\n            layout.insertWidget(this.headEndIndex, separator);\n        }\n        const output = this._createOutput(model);\n        const layout = this.layout;\n        if (index < this.maxNumberOutputs || this.maxNumberOutputs === 0) {\n            layout.insertWidget(index, output);\n        }\n        else if (index >= this.maxNumberOutputs) {\n            layout.removeWidgetAt(this.headTailNumberOutputs + 1);\n            layout.insertWidget(index, output);\n        }\n        if (index >= this.headTailNumberOutputs && this.maxNumberOutputs !== 0) {\n            this.trimmedOutputModels.push(model);\n        }\n    }\n    _createOutput(model) {\n        let output = this.createOutputItem(model);\n        if (output) {\n            output.toggleClass(EXECUTE_CLASS, model.executionCount !== null);\n        }\n        else {\n            output = new Widget();\n        }\n        return output;\n    }\n    /**\n     * Remove the information message related to the trimmed output\n     * and show all previously trimmed outputs.\n     */\n    _showTrimmedOutputs(headTailNumberOutputs) {\n        const layout = this.layout;\n        layout.removeWidgetAt(headTailNumberOutputs);\n        for (let i = 0; i < this.trimmedOutputModels.length - this.headTailNumberOutputs; i++) {\n            const output = this._createOutput(this.trimmedOutputModels[i]);\n            layout.insertWidget(headTailNumberOutputs + i, output);\n        }\n    }\n    /**\n     * Create an output item with a prompt and actual output\n     *\n     * @returns a rendered widget, or null if we cannot render\n     * #### Notes\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (!output) {\n            return null;\n        }\n        const panel = new Panel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        const prompt = this.contentFactory.createOutputPrompt();\n        prompt.executionCount = model.executionCount;\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(output);\n        return panel;\n    }\n    /**\n     * Render a mimetype\n     */\n    createRenderedMimetype(model) {\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (!mimeType) {\n            return null;\n        }\n        let output = this.rendermime.createRenderer(mimeType);\n        const isolated = OutputArea.isIsolated(mimeType, model.metadata);\n        if (isolated === true) {\n            output = new Private.IsolatedRenderer(output);\n        }\n        Private.currentPreferredMimetype.set(output, mimeType);\n        output.renderModel(model).catch(error => {\n            // Manually append error message to output\n            const pre = document.createElement('pre');\n            pre.textContent = `Javascript Error: ${error.message}`;\n            output.node.appendChild(pre);\n            // Remove mime-type-specific CSS classes\n            output.node.className = 'lm-Widget jp-RenderedText';\n            output.node.setAttribute('data-mime-type', 'application/vnd.jupyter.stderr');\n        });\n        return output;\n    }\n}\nexport class SimplifiedOutputArea extends OutputArea {\n    /**\n     * Handle an input request from a kernel by doing nothing.\n     */\n    onInputRequest(msg, future) {\n        return;\n    }\n    /**\n     * Create an output item without a prompt, just the output widgets\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (output) {\n            output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        }\n        return output;\n    }\n}\n/**\n * A namespace for OutputArea statics.\n */\n(function (OutputArea) {\n    /**\n     * Execute code on an output area.\n     */\n    async function execute(code, output, sessionContext, metadata) {\n        var _a;\n        // Override the default for `stop_on_error`.\n        let stopOnError = true;\n        if (metadata &&\n            Array.isArray(metadata.tags) &&\n            metadata.tags.indexOf('raises-exception') !== -1) {\n            stopOnError = false;\n        }\n        const content = {\n            code,\n            stop_on_error: stopOnError\n        };\n        const kernel = (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('Session has no kernel.');\n        }\n        const future = kernel.requestExecute(content, false, metadata);\n        output.future = future;\n        return future.done;\n    }\n    OutputArea.execute = execute;\n    function isIsolated(mimeType, metadata) {\n        const mimeMd = metadata[mimeType];\n        // mime-specific higher priority\n        if (mimeMd && mimeMd['isolated'] !== undefined) {\n            return !!mimeMd['isolated'];\n        }\n        else {\n            // fallback on global\n            return !!metadata['isolated'];\n        }\n    }\n    OutputArea.isIsolated = isIsolated;\n    /**\n     * The default implementation of `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    OutputArea.ContentFactory = ContentFactory;\n    /**\n     * The default `ContentFactory` instance.\n     */\n    OutputArea.defaultContentFactory = new ContentFactory();\n})(OutputArea || (OutputArea = {}));\n/**\n * The default output prompt implementation\n */\nexport class OutputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(OUTPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = '';\n        }\n        else {\n            this.node.textContent = `[${value}]:`;\n        }\n    }\n}\n/**\n * The default stdin widget.\n */\nexport class Stdin extends Widget {\n    /**\n     * Construct a new input widget.\n     */\n    constructor(options) {\n        super({\n            node: Private.createInputWidgetNode(options.prompt, options.password)\n        });\n        this._promise = new PromiseDelegate();\n        this.addClass(STDIN_CLASS);\n        this._input = this.node.getElementsByTagName('input')[0];\n        this._input.focus();\n        this._future = options.future;\n        this._value = options.prompt + ' ';\n    }\n    /**\n     * The value of the widget.\n     */\n    get value() {\n        return this._promise.promise.then(() => this._value);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        const input = this._input;\n        if (event.type === 'keydown') {\n            if (event.keyCode === 13) {\n                // Enter\n                this._future.sendInputReply({\n                    status: 'ok',\n                    value: input.value\n                });\n                if (input.type === 'password') {\n                    this._value += Array(input.value.length + 1).join('·');\n                }\n                else {\n                    this._value += input.value;\n                }\n                this._promise.resolve(void 0);\n            }\n        }\n    }\n    /**\n     * Handle `after-attach` messages sent to the widget.\n     */\n    onAfterAttach(msg) {\n        this._input.addEventListener('keydown', this);\n        this.update();\n    }\n    /**\n     * Handle `update-request` messages sent to the widget.\n     */\n    onUpdateRequest(msg) {\n        this._input.focus();\n    }\n    /**\n     * Handle `before-detach` messages sent to the widget.\n     */\n    onBeforeDetach(msg) {\n        this._input.removeEventListener('keydown', this);\n    }\n}\n/** ****************************************************************************\n * Private namespace\n ******************************************************************************/\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the node for an InputWidget.\n     */\n    function createInputWidgetNode(prompt, password) {\n        const node = document.createElement('div');\n        const promptNode = document.createElement('pre');\n        promptNode.className = STDIN_PROMPT_CLASS;\n        promptNode.textContent = prompt;\n        const input = document.createElement('input');\n        input.className = STDIN_INPUT_CLASS;\n        if (password) {\n            input.type = 'password';\n        }\n        node.appendChild(promptNode);\n        promptNode.appendChild(input);\n        return node;\n    }\n    Private.createInputWidgetNode = createInputWidgetNode;\n    /**\n     * A renderer for IFrame data.\n     */\n    class IsolatedRenderer extends Widget {\n        /**\n         * Create an isolated renderer.\n         */\n        constructor(wrapped) {\n            super({ node: document.createElement('iframe') });\n            this.addClass('jp-mod-isolated');\n            this._wrapped = wrapped;\n            // Once the iframe is loaded, the subarea is dynamically inserted\n            const iframe = this.node;\n            iframe.frameBorder = '0';\n            iframe.scrolling = 'auto';\n            iframe.addEventListener('load', () => {\n                // Workaround needed by Firefox, to properly render svg inside\n                // iframes, see https://stackoverflow.com/questions/10177190/\n                // svg-dynamically-added-to-iframe-does-not-render-correctly\n                iframe.contentDocument.open();\n                // Insert the subarea into the iframe\n                // We must directly write the html. At this point, subarea doesn't\n                // contain any user content.\n                iframe.contentDocument.write(this._wrapped.node.innerHTML);\n                iframe.contentDocument.close();\n                const body = iframe.contentDocument.body;\n                // Adjust the iframe height automatically\n                iframe.style.height = `${body.scrollHeight}px`;\n                iframe.heightChangeObserver = new ResizeObserver(() => {\n                    iframe.style.height = `${body.scrollHeight}px`;\n                });\n                iframe.heightChangeObserver.observe(body);\n            });\n        }\n        /**\n         * Render a mime model.\n         *\n         * @param model - The mime model to render.\n         *\n         * @returns A promise which resolves when rendering is complete.\n         *\n         * #### Notes\n         * This method may be called multiple times during the lifetime\n         * of the widget to update it if and when new data is available.\n         */\n        renderModel(model) {\n            return this._wrapped.renderModel(model);\n        }\n    }\n    Private.IsolatedRenderer = IsolatedRenderer;\n    Private.currentPreferredMimetype = new AttachedProperty({\n        name: 'preferredMimetype',\n        create: owner => ''\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { AttachmentsResolver } from '@jupyterlab/attachments';\nimport { ActivityMonitor, URLExt } from '@jupyterlab/coreutils';\nimport { OutputArea, SimplifiedOutputArea, OutputPrompt, Stdin } from '@jupyterlab/outputarea';\nimport { MimeModel, imageRendererFactory } from '@jupyterlab/rendermime';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { some, filter, toArray } from '@lumino/algorithm';\nimport { PanelLayout, Panel, Widget } from '@lumino/widgets';\nimport { InputCollapser, OutputCollapser } from './collapser';\nimport { CellHeader, CellFooter } from './headerfooter';\nimport { InputArea, InputPrompt } from './inputarea';\nimport { InputPlaceholder, OutputPlaceholder } from './placeholder';\n/**\n * The CSS class added to cell widgets.\n */\nconst CELL_CLASS = 'jp-Cell';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-Cell-header';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-Cell-footer';\n/**\n * The CSS class added to the cell input wrapper.\n */\nconst CELL_INPUT_WRAPPER_CLASS = 'jp-Cell-inputWrapper';\n/**\n * The CSS class added to the cell output wrapper.\n */\nconst CELL_OUTPUT_WRAPPER_CLASS = 'jp-Cell-outputWrapper';\n/**\n * The CSS class added to the cell input area.\n */\nconst CELL_INPUT_AREA_CLASS = 'jp-Cell-inputArea';\n/**\n * The CSS class added to the cell output area.\n */\nconst CELL_OUTPUT_AREA_CLASS = 'jp-Cell-outputArea';\n/**\n * The CSS class added to the cell input collapser.\n */\nconst CELL_INPUT_COLLAPSER_CLASS = 'jp-Cell-inputCollapser';\n/**\n * The CSS class added to the cell output collapser.\n */\nconst CELL_OUTPUT_COLLAPSER_CLASS = 'jp-Cell-outputCollapser';\n/**\n * The class name added to the cell when readonly.\n */\nconst READONLY_CLASS = 'jp-mod-readOnly';\n/**\n * The class name added to code cells.\n */\nconst CODE_CELL_CLASS = 'jp-CodeCell';\n/**\n * The class name added to markdown cells.\n */\nconst MARKDOWN_CELL_CLASS = 'jp-MarkdownCell';\n/**\n * The class name added to rendered markdown output widgets.\n */\nconst MARKDOWN_OUTPUT_CLASS = 'jp-MarkdownOutput';\n/**\n * The class name added to raw cells.\n */\nconst RAW_CELL_CLASS = 'jp-RawCell';\n/**\n * The class name added to a rendered input area.\n */\nconst RENDERED_CLASS = 'jp-mod-rendered';\nconst NO_OUTPUTS_CLASS = 'jp-mod-noOutputs';\n/**\n * The text applied to an empty markdown cell.\n */\nconst DEFAULT_MARKDOWN_TEXT = 'Type Markdown and LaTeX: $ α^2 $';\n/**\n * The timeout to wait for change activity to have ceased before rendering.\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/** ****************************************************************************\n * Cell\n ******************************************************************************/\n/**\n * A base cell widget.\n */\nexport class Cell extends Widget {\n    /**\n     * Construct a new base cell widget.\n     */\n    constructor(options) {\n        super();\n        this._readOnly = false;\n        this._inputHidden = false;\n        this._syncCollapse = false;\n        this._syncEditable = false;\n        this.addClass(CELL_CLASS);\n        const model = (this._model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || Cell.defaultContentFactory);\n        this.layout = new PanelLayout();\n        // Header\n        const header = contentFactory.createCellHeader();\n        header.addClass(CELL_HEADER_CLASS);\n        this.layout.addWidget(header);\n        // Input\n        const inputWrapper = (this._inputWrapper = new Panel());\n        inputWrapper.addClass(CELL_INPUT_WRAPPER_CLASS);\n        const inputCollapser = new InputCollapser();\n        inputCollapser.addClass(CELL_INPUT_COLLAPSER_CLASS);\n        const input = (this._input = new InputArea({\n            model,\n            contentFactory,\n            updateOnShow: options.updateEditorOnShow\n        }));\n        input.addClass(CELL_INPUT_AREA_CLASS);\n        inputWrapper.addWidget(inputCollapser);\n        inputWrapper.addWidget(input);\n        this.layout.addWidget(inputWrapper);\n        this._inputPlaceholder = new InputPlaceholder(() => {\n            this.inputHidden = !this.inputHidden;\n        });\n        // Footer\n        const footer = this.contentFactory.createCellFooter();\n        footer.addClass(CELL_FOOTER_CLASS);\n        this.layout.addWidget(footer);\n        // Editor settings\n        if (options.editorConfig) {\n            let editorOptions = {};\n            Object.keys(options.editorConfig).forEach((key) => {\n                var _a, _b;\n                editorOptions[key] = (_b = (_a = options.editorConfig) === null || _a === void 0 ? void 0 : _a[key]) !== null && _b !== void 0 ? _b : null;\n            });\n            this.editor.setOptions(editorOptions);\n        }\n        model.metadata.changed.connect(this.onMetadataChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        this.loadCollapseState();\n        this.loadEditableState();\n        return this;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        if (!this._inputHidden) {\n            return this._input.promptNode;\n        }\n        else {\n            return this._inputPlaceholder.node\n                .firstElementChild;\n        }\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._input.editorWidget;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._input.editor;\n    }\n    /**\n     * Get the model used by the cell.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the input area for the cell.\n     */\n    get inputArea() {\n        return this._input;\n    }\n    /**\n     * The read only state of the cell.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(value) {\n        if (value === this._readOnly) {\n            return;\n        }\n        this._readOnly = value;\n        if (this.syncEditable) {\n            this.saveEditableState();\n        }\n        this.update();\n    }\n    /**\n     * Save view editable state to model\n     */\n    saveEditableState() {\n        const { metadata } = this.model;\n        const current = metadata.get('editable');\n        if ((this.readOnly && current === false) ||\n            (!this.readOnly && current === undefined)) {\n            return;\n        }\n        if (this.readOnly) {\n            this.model.metadata.set('editable', false);\n        }\n        else {\n            this.model.metadata.delete('editable');\n        }\n    }\n    /**\n     * Load view editable state from model.\n     */\n    loadEditableState() {\n        this.readOnly = this.model.metadata.get('editable') === false;\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return Promise.resolve(undefined);\n    }\n    /**\n     * Set the prompt for the widget.\n     */\n    setPrompt(value) {\n        this._input.setPrompt(value);\n    }\n    /**\n     * The view state of input being hidden.\n     */\n    get inputHidden() {\n        return this._inputHidden;\n    }\n    set inputHidden(value) {\n        if (this._inputHidden === value) {\n            return;\n        }\n        const layout = this._inputWrapper.layout;\n        if (value) {\n            this._input.parent = null;\n            layout.addWidget(this._inputPlaceholder);\n        }\n        else {\n            this._inputPlaceholder.parent = null;\n            layout.addWidget(this._input);\n        }\n        this._inputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n        this.handleInputHidden(value);\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        const jupyter = Object.assign({}, this.model.metadata.get('jupyter'));\n        if ((this.inputHidden && jupyter.source_hidden === true) ||\n            (!this.inputHidden && jupyter.source_hidden === undefined)) {\n            return;\n        }\n        if (this.inputHidden) {\n            jupyter.source_hidden = true;\n        }\n        else {\n            delete jupyter.source_hidden;\n        }\n        if (Object.keys(jupyter).length === 0) {\n            this.model.metadata.delete('jupyter');\n        }\n        else {\n            this.model.metadata.set('jupyter', jupyter);\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadCollapseState() {\n        const jupyter = this.model.metadata.get('jupyter') || {};\n        this.inputHidden = !!jupyter.source_hidden;\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This is called by the `inputHidden` setter so that subclasses\n     * can perform actions upon the input being hidden without accessing\n     * private state.\n     */\n    handleInputHidden(value) {\n        return;\n    }\n    /**\n     * Whether to sync the collapse state to the cell model.\n     */\n    get syncCollapse() {\n        return this._syncCollapse;\n    }\n    set syncCollapse(value) {\n        if (this._syncCollapse === value) {\n            return;\n        }\n        this._syncCollapse = value;\n        if (value) {\n            this.loadCollapseState();\n        }\n    }\n    /**\n     * Whether to sync the editable state to the cell model.\n     */\n    get syncEditable() {\n        return this._syncEditable;\n    }\n    set syncEditable(value) {\n        if (this._syncEditable === value) {\n            return;\n        }\n        this._syncEditable = value;\n        if (value) {\n            this.loadEditableState();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory\n        });\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._input = null;\n        this._model = null;\n        this._inputWrapper = null;\n        this._inputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        this.update();\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * Handle `fit-request` messages.\n     */\n    onFitRequest(msg) {\n        // need this for for when a theme changes font size\n        this.editor.refresh();\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        if (!this._model) {\n            return;\n        }\n        // Handle read only state.\n        if (this.editor.getOption('readOnly') !== this._readOnly) {\n            this.editor.setOption('readOnly', this._readOnly);\n            this.toggleClass(READONLY_CLASS, this._readOnly);\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        switch (args.key) {\n            case 'jupyter':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            case 'editable':\n                if (this.syncEditable) {\n                    this.loadEditableState();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n/**\n * The namespace for the `Cell` class statics.\n */\n(function (Cell) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     *\n     * This includes a CodeMirror editor factory to make it easy to use out of the box.\n     */\n    class ContentFactory {\n        /**\n         * Create a content factory for a cell.\n         */\n        constructor(options = {}) {\n            this._editorFactory =\n                options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * The readonly editor factory that create code editors\n         */\n        get editorFactory() {\n            return this._editorFactory;\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellHeader() {\n            return new CellHeader();\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellFooter() {\n            return new CellFooter();\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    Cell.ContentFactory = ContentFactory;\n    /**\n     * The default content factory for cells.\n     */\n    Cell.defaultContentFactory = new ContentFactory();\n})(Cell || (Cell = {}));\n/** ****************************************************************************\n * CodeCell\n ******************************************************************************/\n/**\n * A widget for a code cell.\n */\nexport class CodeCell extends Cell {\n    /**\n     * Construct a code cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this._outputHidden = false;\n        this._syncScrolled = false;\n        this._savingMetadata = false;\n        this.addClass(CODE_CELL_CLASS);\n        // Only save options not handled by parent constructor.\n        const rendermime = (this._rendermime = options.rendermime);\n        const contentFactory = this.contentFactory;\n        const model = this.model;\n        // Insert the output before the cell footer.\n        const outputWrapper = (this._outputWrapper = new Panel());\n        outputWrapper.addClass(CELL_OUTPUT_WRAPPER_CLASS);\n        const outputCollapser = new OutputCollapser();\n        outputCollapser.addClass(CELL_OUTPUT_COLLAPSER_CLASS);\n        const output = (this._output = new OutputArea({\n            model: model.outputs,\n            rendermime,\n            contentFactory: contentFactory,\n            maxNumberOutputs: options.maxNumberOutputs\n        }));\n        output.addClass(CELL_OUTPUT_AREA_CLASS);\n        // Set a CSS if there are no outputs, and connect a signal for future\n        // changes to the number of outputs. This is for conditional styling\n        // if there are no outputs.\n        if (model.outputs.length === 0) {\n            this.addClass(NO_OUTPUTS_CLASS);\n        }\n        output.outputLengthChanged.connect(this._outputLengthHandler, this);\n        outputWrapper.addWidget(outputCollapser);\n        outputWrapper.addWidget(output);\n        this.layout.insertWidget(2, outputWrapper);\n        this._outputPlaceholder = new OutputPlaceholder(() => {\n            this.outputHidden = !this.outputHidden;\n        });\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        super.initializeState();\n        this.loadScrolledState();\n        this.setPrompt(`${this.model.executionCount || ''}`);\n        return this;\n    }\n    /**\n     * Get the output area for the cell.\n     */\n    get outputArea() {\n        return this._output;\n    }\n    /**\n     * The view state of output being collapsed.\n     */\n    get outputHidden() {\n        return this._outputHidden;\n    }\n    set outputHidden(value) {\n        if (this._outputHidden === value) {\n            return;\n        }\n        const layout = this._outputWrapper.layout;\n        if (value) {\n            layout.removeWidget(this._output);\n            layout.addWidget(this._outputPlaceholder);\n            if (this.inputHidden && !this._outputWrapper.isHidden) {\n                this._outputWrapper.hide();\n            }\n        }\n        else {\n            if (this._outputWrapper.isHidden) {\n                this._outputWrapper.show();\n            }\n            layout.removeWidget(this._outputPlaceholder);\n            layout.addWidget(this._output);\n        }\n        this._outputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        // Because collapse state for a code cell involves two different pieces of\n        // metadata (the `collapsed` and `jupyter` metadata keys), we block reacting\n        // to changes in metadata until we have fully committed our changes.\n        // Otherwise setting one key can trigger a write to the other key to\n        // maintain the synced consistency.\n        this._savingMetadata = true;\n        try {\n            super.saveCollapseState();\n            const metadata = this.model.metadata;\n            const collapsed = this.model.metadata.get('collapsed');\n            if ((this.outputHidden && collapsed === true) ||\n                (!this.outputHidden && collapsed === undefined)) {\n                return;\n            }\n            // Do not set jupyter.outputs_hidden since it is redundant. See\n            // and https://github.com/jupyter/nbformat/issues/137\n            if (this.outputHidden) {\n                metadata.set('collapsed', true);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n        finally {\n            this._savingMetadata = false;\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     *\n     * We consider the `collapsed` metadata key as the source of truth for outputs\n     * being hidden.\n     */\n    loadCollapseState() {\n        super.loadCollapseState();\n        this.outputHidden = !!this.model.metadata.get('collapsed');\n    }\n    /**\n     * Whether the output is in a scrolled state?\n     */\n    get outputsScrolled() {\n        return this._outputsScrolled;\n    }\n    set outputsScrolled(value) {\n        this.toggleClass('jp-mod-outputsScrolled', value);\n        this._outputsScrolled = value;\n        if (this.syncScrolled) {\n            this.saveScrolledState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveScrolledState() {\n        const { metadata } = this.model;\n        const current = metadata.get('scrolled');\n        if ((this.outputsScrolled && current === true) ||\n            (!this.outputsScrolled && current === undefined)) {\n            return;\n        }\n        if (this.outputsScrolled) {\n            metadata.set('scrolled', true);\n        }\n        else {\n            metadata.delete('scrolled');\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadScrolledState() {\n        const metadata = this.model.metadata;\n        // We don't have the notion of 'auto' scrolled, so we make it false.\n        if (metadata.get('scrolled') === 'auto') {\n            this.outputsScrolled = false;\n        }\n        else {\n            this.outputsScrolled = !!metadata.get('scrolled');\n        }\n    }\n    /**\n     * Whether to sync the scrolled state to the cell model.\n     */\n    get syncScrolled() {\n        return this._syncScrolled;\n    }\n    set syncScrolled(value) {\n        if (this._syncScrolled === value) {\n            return;\n        }\n        this._syncScrolled = value;\n        if (value) {\n            this.loadScrolledState();\n        }\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This method is called by the case cell implementation and is\n     * subclasses here so the code cell can watch to see when input\n     * is hidden without accessing private state.\n     */\n    handleInputHidden(value) {\n        if (!value && this._outputWrapper.isHidden) {\n            this._outputWrapper.show();\n        }\n        else if (value && !this._outputWrapper.isHidden && this._outputHidden) {\n            this._outputWrapper.hide();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n    /**\n     * Clone the OutputArea alone, returning a simplified output area, using the same model.\n     */\n    cloneOutputArea() {\n        return new SimplifiedOutputArea({\n            model: this.model.outputs,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n    /**\n     * Dispose of the resources used by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._output.outputLengthChanged.disconnect(this._outputLengthHandler, this);\n        this._rendermime = null;\n        this._output = null;\n        this._outputWrapper = null;\n        this._outputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle changes in the model.\n     */\n    onStateChanged(model, args) {\n        switch (args.name) {\n            case 'executionCount':\n                this.setPrompt(`${model.executionCount || ''}`);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        if (this._savingMetadata) {\n            // We are in middle of a metadata transaction, so don't react to it.\n            return;\n        }\n        switch (args.key) {\n            case 'scrolled':\n                if (this.syncScrolled) {\n                    this.loadScrolledState();\n                }\n                break;\n            case 'collapsed':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            default:\n                break;\n        }\n        super.onMetadataChanged(model, args);\n    }\n    /**\n     * Handle changes in the number of outputs in the output area.\n     */\n    _outputLengthHandler(sender, args) {\n        const force = args === 0 ? true : false;\n        this.toggleClass(NO_OUTPUTS_CLASS, force);\n    }\n}\n/**\n * The namespace for the `CodeCell` class statics.\n */\n(function (CodeCell) {\n    /**\n     * Execute a cell given a client session.\n     */\n    async function execute(cell, sessionContext, metadata) {\n        var _a;\n        const model = cell.model;\n        const code = model.value.text;\n        if (!code.trim() || !((_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel)) {\n            model.clearExecution();\n            return;\n        }\n        const cellId = { cellId: model.id };\n        metadata = Object.assign(Object.assign(Object.assign({}, model.metadata.toJSON()), metadata), cellId);\n        const { recordTiming } = metadata;\n        model.clearExecution();\n        cell.outputHidden = false;\n        cell.setPrompt('*');\n        model.trusted = true;\n        let future;\n        try {\n            const msgPromise = OutputArea.execute(code, cell.outputArea, sessionContext, metadata);\n            // cell.outputArea.future assigned synchronously in `execute`\n            if (recordTiming) {\n                const recordTimingHook = (msg) => {\n                    let label;\n                    switch (msg.header.msg_type) {\n                        case 'status':\n                            label = `status.${msg.content.execution_state}`;\n                            break;\n                        case 'execute_input':\n                            label = 'execute_input';\n                            break;\n                        default:\n                            return true;\n                    }\n                    // If the data is missing, estimate it to now\n                    // Date was added in 5.1: https://jupyter-client.readthedocs.io/en/stable/messaging.html#message-header\n                    const value = msg.header.date || new Date().toISOString();\n                    const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                    timingInfo[`iopub.${label}`] = value;\n                    model.metadata.set('execution', timingInfo);\n                    return true;\n                };\n                cell.outputArea.future.registerMessageHook(recordTimingHook);\n            }\n            else {\n                model.metadata.delete('execution');\n            }\n            // Save this execution's future so we can compare in the catch below.\n            future = cell.outputArea.future;\n            const msg = (await msgPromise);\n            model.executionCount = msg.content.execution_count;\n            if (recordTiming) {\n                const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                const started = msg.metadata.started;\n                // Started is not in the API, but metadata IPyKernel sends\n                if (started) {\n                    timingInfo['shell.execute_reply.started'] = started;\n                }\n                // Per above, the 5.0 spec does not assume date, so we estimate is required\n                const finished = msg.header.date;\n                timingInfo['shell.execute_reply'] =\n                    finished || new Date().toISOString();\n                model.metadata.set('execution', timingInfo);\n            }\n            return msg;\n        }\n        catch (e) {\n            // If we started executing, and the cell is still indicating this\n            // execution, clear the prompt.\n            if (future && !cell.isDisposed && cell.outputArea.future === future) {\n                cell.setPrompt('');\n            }\n            throw e;\n        }\n    }\n    CodeCell.execute = execute;\n})(CodeCell || (CodeCell = {}));\n/**\n * `AttachmentsCell` - A base class for a cell widget that allows\n *  attachments to be drag/drop'd or pasted onto it\n */\nexport class AttachmentsCell extends Cell {\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'paste':\n                this._evtPaste(event);\n                break;\n            case 'dragenter':\n                event.preventDefault();\n                break;\n            case 'dragover':\n                event.preventDefault();\n                break;\n            case 'drop':\n                this._evtNativeDrop(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        node.addEventListener('dragenter', this);\n        node.addEventListener('dragover', this);\n        node.addEventListener('drop', this);\n        node.addEventListener('paste', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'`\n     * message\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('drop', this);\n        node.removeEventListener('dragover', this);\n        node.removeEventListener('dragenter', this);\n        node.removeEventListener('paste', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    _evtDragOver(event) {\n        const supportedMimeType = some(imageRendererFactory.mimeTypes, mimeType => {\n            if (!event.mimeData.hasData(CONTENTS_MIME_RICH)) {\n                return false;\n            }\n            const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n            return data.model.mimetype === mimeType;\n        });\n        if (!supportedMimeType) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n    }\n    /**\n     * Handle the `paste` event for the widget\n     */\n    _evtPaste(event) {\n        if (event.clipboardData) {\n            const items = event.clipboardData.items;\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].type === 'text/plain') {\n                    // Skip if this text is the path to a file\n                    if (i < items.length - 1 && items[i + 1].kind === 'file') {\n                        continue;\n                    }\n                    items[i].getAsString(text => {\n                        var _a, _b;\n                        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n                    });\n                }\n                this._attachFiles(event.clipboardData.items);\n            }\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `drop` event for the widget\n     */\n    _evtNativeDrop(event) {\n        if (event.dataTransfer) {\n            this._attachFiles(event.dataTransfer.items);\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        const supportedMimeTypes = toArray(filter(event.mimeData.types(), mimeType => {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n                return (imageRendererFactory.mimeTypes.indexOf(data.model.mimetype) !== -1);\n            }\n            return imageRendererFactory.mimeTypes.indexOf(mimeType) !== -1;\n        }));\n        if (supportedMimeTypes.length === 0) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        event.dropAction = 'copy';\n        for (const mimeType of supportedMimeTypes) {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const { model, withContent } = event.mimeData.getData(CONTENTS_MIME_RICH);\n                if (model.type === 'file') {\n                    const URI = this._generateURI(model.name);\n                    this.updateCellSourceWithAttachment(model.name, URI);\n                    void withContent().then(fullModel => {\n                        this.model.attachments.set(URI, {\n                            [fullModel.mimetype]: fullModel.content\n                        });\n                    });\n                }\n            }\n            else {\n                // Pure mimetype, no useful name to infer\n                const URI = this._generateURI();\n                this.model.attachments.set(URI, {\n                    [mimeType]: event.mimeData.getData(mimeType)\n                });\n                this.updateCellSourceWithAttachment(URI, URI);\n            }\n        }\n    }\n    /**\n     * Attaches all DataTransferItems (obtained from\n     * clipboard or native drop events) to the cell\n     */\n    _attachFiles(items) {\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            if (item.kind === 'file') {\n                const blob = item.getAsFile();\n                if (blob) {\n                    this._attachFile(blob);\n                }\n            }\n        }\n    }\n    /**\n     * Takes in a file object and adds it to\n     * the cell attachments\n     */\n    _attachFile(blob) {\n        const reader = new FileReader();\n        reader.onload = evt => {\n            const { href, protocol } = URLExt.parse(reader.result);\n            if (protocol !== 'data:') {\n                return;\n            }\n            const dataURIRegex = /([\\w+\\/\\+]+)?(?:;(charset=[\\w\\d-]*|base64))?,(.*)/;\n            const matches = dataURIRegex.exec(href);\n            if (!matches || matches.length !== 4) {\n                return;\n            }\n            const mimeType = matches[1];\n            const encodedData = matches[3];\n            const bundle = { [mimeType]: encodedData };\n            const URI = this._generateURI(blob.name);\n            if (mimeType.startsWith('image/')) {\n                this.model.attachments.set(URI, bundle);\n                this.updateCellSourceWithAttachment(blob.name, URI);\n            }\n        };\n        reader.onerror = evt => {\n            console.error(`Failed to attach ${blob.name}` + evt);\n        };\n        reader.readAsDataURL(blob);\n    }\n    /**\n     * Generates a unique URI for a file\n     * while preserving the file extension.\n     */\n    _generateURI(name = '') {\n        const lastIndex = name.lastIndexOf('.');\n        return lastIndex !== -1\n            ? UUID.uuid4().concat(name.substring(lastIndex))\n            : UUID.uuid4();\n    }\n}\n/** ****************************************************************************\n * MarkdownCell\n ******************************************************************************/\n/**\n * A widget for a Markdown cell.\n *\n * #### Notes\n * Things get complicated if we want the rendered text to update\n * any time the text changes, the text editor model changes,\n * or the input area model changes.  We don't support automatically\n * updating the rendered text in all of these cases.\n */\nexport class MarkdownCell extends AttachmentsCell {\n    /**\n     * Construct a Markdown cell widget.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._renderer = null;\n        this._rendered = true;\n        this._prevText = '';\n        this._ready = new PromiseDelegate();\n        this.addClass(MARKDOWN_CELL_CLASS);\n        // Ensure we can resolve attachments:\n        this._rendermime = options.rendermime.clone({\n            resolver: new AttachmentsResolver({\n                parent: (_a = options.rendermime.resolver) !== null && _a !== void 0 ? _a : undefined,\n                model: this.model.attachments\n            })\n        });\n        // Stop codemirror handling paste\n        this.editor.setOption('handlePaste', false);\n        // Throttle the rendering rate of the widget.\n        this._monitor = new ActivityMonitor({\n            signal: this.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        this._monitor.activityStopped.connect(() => {\n            if (this._rendered) {\n                this.update();\n            }\n        }, this);\n        void this._updateRenderedInput().then(() => {\n            this._ready.resolve(void 0);\n        });\n        this.renderInput(this._renderer);\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Whether the cell is rendered.\n     */\n    get rendered() {\n        return this._rendered;\n    }\n    set rendered(value) {\n        if (value === this._rendered) {\n            return;\n        }\n        this._rendered = value;\n        this._handleRendered();\n        // Refreshing an editor can be really expensive, so we don't call it from\n        // _handleRendered, since _handledRendered is also called on every update\n        // request.\n        if (!this._rendered) {\n            this.editor.refresh();\n        }\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        this.addClass(RENDERED_CLASS);\n        this.inputArea.renderInput(widget);\n    }\n    /**\n     * Show the text editor instead of rendered input.\n     */\n    showEditor() {\n        this.removeClass(RENDERED_CLASS);\n        this.inputArea.showEditor();\n    }\n    /*\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        // Make sure we are properly rendered.\n        this._handleRendered();\n        super.onUpdateRequest(msg);\n    }\n    /**\n     * Modify the cell source to include a reference to the attachment.\n     */\n    updateCellSourceWithAttachment(attachmentName, URI) {\n        var _a, _b;\n        const textToBeAppended = `![${attachmentName}](attachment:${URI !== null && URI !== void 0 ? URI : attachmentName})`;\n        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, textToBeAppended);\n    }\n    /**\n     * Handle the rendered state.\n     */\n    _handleRendered() {\n        if (!this._rendered) {\n            this.showEditor();\n        }\n        else {\n            // TODO: It would be nice for the cell to provide a way for\n            // its consumers to hook into when the rendering is done.\n            void this._updateRenderedInput();\n            this.renderInput(this._renderer);\n        }\n    }\n    /**\n     * Update the rendered input.\n     */\n    _updateRenderedInput() {\n        const model = this.model;\n        const text = (model && model.value.text) || DEFAULT_MARKDOWN_TEXT;\n        // Do not re-render if the text has not changed.\n        if (text !== this._prevText) {\n            const mimeModel = new MimeModel({ data: { 'text/markdown': text } });\n            if (!this._renderer) {\n                this._renderer = this._rendermime.createRenderer('text/markdown');\n                this._renderer.addClass(MARKDOWN_OUTPUT_CLASS);\n            }\n            this._prevText = text;\n            return this._renderer.renderModel(mimeModel);\n        }\n        return Promise.resolve(void 0);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n}\n/** ****************************************************************************\n * RawCell\n ******************************************************************************/\n/**\n * A widget for a raw cell.\n */\nexport class RawCell extends Cell {\n    /**\n     * Construct a raw cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass(RAW_CELL_CLASS);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory\n        });\n    }\n}\n//# sourceMappingURL=widget.js.map"],"sourceRoot":""}