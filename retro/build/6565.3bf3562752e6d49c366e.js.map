{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/application-extension/lib/index.js"],"names":["CommandIDs","WebSocketProvider","options","super","guid","ymodel","ydoc","Promise","resolve","lock","download","id","provides","IDocumentProviderFactory","activate","app","collaborative","PageConfig","ProviderMock","autoStart","requires","ITranslator","IDocumentManager","optional","ICommandPalette","IMainMenu","translator","docManager","palette","mainMenu","trans","load","commands","shell","isEnabled","currentWidget","contextForWidget","addCommand","label","__","caption","execute","current","context","showDialog","title","body","buttons","Dialog","element","document","createElement","href","encodeURIComponent","model","toString","path","appendChild","click","removeChild","category","addItem","command","fileMenu","addGroup","ILabShell","labShell","logo","Widget","liteIcon","container","node","elementPosition","margin","height","width","add","rank","TranslationManager"],"mappings":"yKAiCIA,E,8GApBJ,MAAMC,UAA0B,IAC5B,YAAYC,GACRC,MAHkB,sBAGOD,EAAQE,KAAMF,EAAQG,OAAOC,MAE1D,wBACI,OAAOC,QAAQC,SAAQ,GAE3B,uBAGA,cACI,OAAOD,QAAQC,QAAQ,GAE3B,YAAYC,MAQhB,SAAWT,GACPA,EAAWU,SAAW,sBAD1B,CAEGV,IAAeA,EAAa,KAI/B,MAsGA,EANgB,CAhGU,CACtBW,GAAI,iDACJC,SAAU,EAAAC,yBACVC,SAAWC,IACP,MAAMC,EAAgB,EAAAC,WAAA,UAAqB,iBAI3C,OAHiBf,GACNc,EAAgB,IAAIf,EAAkBC,GAAW,IAAI,EAAAgB,eAQjD,CACnBP,GAAI,8CACJQ,WAAW,EACXC,SAAU,CAAC,EAAAC,YAAa,EAAAC,kBACxBC,SAAU,CAAC,EAAAC,gBAAiB,EAAAC,WAC5BX,SAAU,CAACC,EAAKW,EAAYC,EAAYC,EAASC,KAC7C,MAAMC,EAAQJ,EAAWK,KAAK,eACxB,SAAEC,EAAQ,MAAEC,GAAUlB,EACtBmB,EAAY,KACd,MAAM,cAAEC,GAAkBF,EAC1B,SAAUE,IAAiBR,EAAWS,iBAAiBD,KAE3DH,EAASK,WAAWrC,EAAWU,SAAU,CACrC4B,MAAOR,EAAMS,GAAG,YAChBC,QAASV,EAAMS,GAAG,sCAClBL,YACAO,QAAS,KAEL,MAAMC,EAAUT,EAAME,cACtB,GAAID,KAAeQ,EAAS,CACxB,MAAMC,EAAUhB,EAAWS,iBAAiBM,GAC5C,IAAKC,EACD,OAAO,IAAAC,YAAW,CACdC,MAAOf,EAAMS,GAAG,mBAChBO,KAAMhB,EAAMS,GAAG,wCACfQ,QAAS,CAAC,EAAAC,OAAA,SAAgB,CAAEV,MAAOR,EAAMS,GAAG,WAGpD,MAAMU,EAAUC,SAASC,cAAc,KACvCF,EAAQG,KAAO,gCAAgCC,mBAAmBV,EAAQW,MAAMC,cAChFN,EAAQvC,SAAWiC,EAAQa,KAC3BN,SAASJ,KAAKW,YAAYR,GAC1BA,EAAQS,QACRR,SAASJ,KAAKa,YAAYV,OAItC,MAAMW,EAAW9B,EAAMS,GAAG,mBACtBX,GACAA,EAAQiC,QAAQ,CAAEC,QAAS9D,EAAWU,SAAUkD,aAEhD/B,GACAA,EAASkC,SAASC,SAAS,CAAC,CAAEF,QAAS9D,EAAWU,WAAa,KAO1D,CACbC,GAAI,0CAEJY,SAAU,CAAC,EAAA0C,WACX9C,WAAW,EACXL,SAAU,CAACC,EAAKmD,KACZ,IAAKA,EACD,OAEJ,MAAMC,EAAO,IAAI,EAAAC,OACjB,EAAAC,SAAA,QAAiB,CACbC,UAAWH,EAAKI,KAChBC,gBAAiB,SACjBC,OAAQ,kBACRC,OAAQ,OACRC,MAAO,SAEXR,EAAKxD,GAAK,cACVuD,EAASU,IAAIT,EAAM,MAAO,CAAEU,KAAM,MAMvB,CACflE,GAAI,gDACJG,SAAWC,GACoB,IAAI,EAAA+D,mBAGnC3D,WAAW,EACXP,SAAU,EAAAS","file":"6565.3bf3562752e6d49c366e.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabShell } from '@jupyterlab/application';\nimport { ICommandPalette, Dialog, showDialog } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IDocumentProviderFactory, ProviderMock } from '@jupyterlab/docprovider';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ITranslator, TranslationManager } from '@jupyterlab/translation';\nimport { liteIcon } from '@jupyterlite/ui-components';\nimport { Widget } from '@lumino/widgets';\nimport { WebsocketProvider } from 'y-websocket';\nconst YJS_WEBSOCKET_URL = 'wss://demos.yjs.dev';\nclass WebSocketProvider extends WebsocketProvider {\n    constructor(options) {\n        super(YJS_WEBSOCKET_URL, options.guid, options.ymodel.ydoc);\n    }\n    requestInitialContent() {\n        return Promise.resolve(true);\n    }\n    putInitializedState() {\n        // no-op\n    }\n    acquireLock() {\n        return Promise.resolve(0);\n    }\n    releaseLock(lock) {\n        // no-op\n    }\n}\n/**\n * The command IDs used by the application extension.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.download = 'docmanager:download';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * An alternative document provider plugin\n */\nconst docProviderPlugin = {\n    id: '@jupyterlite/application-extension:docprovider',\n    provides: IDocumentProviderFactory,\n    activate: (app) => {\n        const collaborative = PageConfig.getOption('collaborative');\n        const factory = (options) => {\n            return collaborative ? new WebSocketProvider(options) : new ProviderMock();\n        };\n        return factory;\n    }\n};\n/**\n * A plugin providing download commands in the file menu and command palette.\n */\nconst downloadPlugin = {\n    id: '@jupyterlite/application-extension:download',\n    autoStart: true,\n    requires: [ITranslator, IDocumentManager],\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, translator, docManager, palette, mainMenu) => {\n        const trans = translator.load('jupyterlab');\n        const { commands, shell } = app;\n        const isEnabled = () => {\n            const { currentWidget } = shell;\n            return !!(currentWidget && docManager.contextForWidget(currentWidget));\n        };\n        commands.addCommand(CommandIDs.download, {\n            label: trans.__('Download'),\n            caption: trans.__('Download the file to your computer'),\n            isEnabled,\n            execute: () => {\n                // Checks that shell.currentWidget is valid:\n                const current = shell.currentWidget;\n                if (isEnabled() && current) {\n                    const context = docManager.contextForWidget(current);\n                    if (!context) {\n                        return showDialog({\n                            title: trans.__('Cannot Download'),\n                            body: trans.__('No context found for current widget!'),\n                            buttons: [Dialog.okButton({ label: trans.__('OK') })]\n                        });\n                    }\n                    const element = document.createElement('a');\n                    element.href = `data:text/json;charset=utf-8,${encodeURIComponent(context.model.toString())}`;\n                    element.download = context.path;\n                    document.body.appendChild(element);\n                    element.click();\n                    document.body.removeChild(element);\n                }\n            }\n        });\n        const category = trans.__('File Operations');\n        if (palette) {\n            palette.addItem({ command: CommandIDs.download, category });\n        }\n        if (mainMenu) {\n            mainMenu.fileMenu.addGroup([{ command: CommandIDs.download }], 6);\n        }\n    }\n};\n/**\n * The main application icon.\n */\nconst liteLogo = {\n    id: '@jupyterlite/application-extension:logo',\n    // marking as optional to not throw errors in retro\n    optional: [ILabShell],\n    autoStart: true,\n    activate: (app, labShell) => {\n        if (!labShell) {\n            return;\n        }\n        const logo = new Widget();\n        liteIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px'\n        });\n        logo.id = 'jp-MainLogo';\n        labShell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * A simplified Translator\n */\nconst translator = {\n    id: '@jupyterlite/application-extension:translator',\n    activate: (app) => {\n        const translationManager = new TranslationManager();\n        return translationManager;\n    },\n    autoStart: true,\n    provides: ITranslator\n};\nconst plugins = [\n    docProviderPlugin,\n    downloadPlugin,\n    liteLogo,\n    translator\n];\nexport default plugins;\n"],"sourceRoot":""}